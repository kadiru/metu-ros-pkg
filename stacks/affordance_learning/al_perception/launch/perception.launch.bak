<launch>

  <arg name="use_right_arm" default="true" />
  <arg name="use_left_arm" default="true" />
  <arg name="input_cloud" default="/pointcloud2_pr2_self_filtered" /><!--/swissranger/pointcloud2_raw-->
  <arg name="sensor_cloud" default="/kinect_camera/points" />
  <arg name="sensor_frame" default="/head_kinect_optical_frame" />

  <arg if="$(arg use_right_arm)"      name="right_arm_text" value="right" />
  <arg unless="$(arg use_right_arm)"  name="right_arm_text" value="" />
  <arg if="$(arg use_left_arm)"       name="left_arm_text" value="left" />
  <arg unless="$(arg use_left_arm)"   name="left_arm_text" value="" />
  <arg name="arm_config" value="$(arg right_arm_text)_$(arg left_arm_text)" />

  <include file="$(find pr2_machine)/$(env ROBOT).machine" />

  <!--node pkg="point_cloud_converter" name="point_cloud_converter_preself" type="point_cloud_converter">
        <remap from="/points_in" to="/swissranger/scan" />
        <remap from="/points2_out" to="/swissranger/pointcloud2_raw" />
  </node-->
  
  <param name="robot_description" command="$(find xacro)/xacro.py '$(find pr2_gazebo)/robots/pr2_with_kinect.urdf.xacro'" />
  
  <!-- pr2 self filter kinect data -->
  <node pkg="robot_self_filter" type="self_filter" respawn="true" name="pr2_self_filter" output="screen">
     <!--remap from="cloud_in" to="/swissranger/pointcloud2_raw" /-->
     <remap from="cloud_in" to="$(arg sensor_cloud)" />
     <remap from="cloud_out" to="$(arg input_cloud)" />
     <param name="sensor_frame" type="string" value="$(arg sensor_frame)" />         
     <param name="subsample_value" type="double" value=".01"/>
     <rosparam command="load" file="$(find pr2_arm_navigation_perception)/config/self_filter_$(arg arm_config).yaml" />
     <!--rosparam command="load" file="$(find pr2_arm_navigation_perception)/config/self_filter.yaml" /-->
  </node>

    <arg name="tabletop_segmentation_convert_to_base_link" default="true" />
    <arg name="tabletop_segmentation_clustering_voxel_size" default="0.003" />
    <node pkg="tabletop_object_detector" name="tabletop_segmentation" type="tabletop_segmentation" respawn="true" output="screen">
	<!--topic remapping-->
        <remap from="cloud_in" to="$(arg input_cloud)" />
        <remap from="segmentation_srv" to="tabletop_segmentation" />
        <remap from="markers_out" to="tabletop_segmentation_markers" />

	<param name="clustering_voxel_size" value="$(arg tabletop_segmentation_clustering_voxel_size)" />
	<param name="inlier_threshold" value="300" />
	<param name="plane_detection_voxel_size" value="0.01" />
	<param name="cluster_distance" value="0.03" />
	<param name="min_cluster_size" value="300" />

	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="processing_frame" value="base_footprint" />
	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="up_direction" value="1.0" />
	<param name="tabletop_segmentation/z_filter_min" type="double" value="-5.0" />
	<param name="tabletop_segmentation/z_filter_max" type="double" value="5.0" />
	<param name="tabletop_segmentation/y_filter_min" type="double" value="-5.0" />
	<param name="tabletop_segmentation/y_filter_max" type="double" value="5.0" />
	<param name="tabletop_segmentation/x_filter_min" type="double" value="-5.0" />
	<param name="tabletop_segmentation/x_filter_max" type="double" value="5.0" />
	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="table_z_filter_min" value="-1.0" />
	<param if="$(arg tabletop_segmentation_convert_to_base_link)" name="table_z_filter_max" value="1.0" />
    </node>
  
  <node name="cluster_bounding_box_finder" pkg="object_manipulator" type="cluster_bounding_box_finder_server.py" output="screen" respawn="false" />
  
  <rosparam command="load" file="$(find al_perception)/config/perception_settings.yaml" />
  <param name="input_cloud" type="string" value="$(arg input_cloud)" />
  <node name="al_perception" pkg="al_perception" type="al_perception" output="screen" respawn="false">
  </node>

</launch>

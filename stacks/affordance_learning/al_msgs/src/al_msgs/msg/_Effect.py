"""autogenerated by genpy from al_msgs/Effect.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Effect(genpy.Message):
  _md5sum = "a11ba7b642f4188ac273956115353b83"
  _type = "al_msgs/Effect"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 MAX_EFFECT_INDEX = 29

int8 NO_CHANGE=0
int8 REACHED=1
int8 MOVED_RIGHT=2
int8 MOVED_LEFT=3
int8 MOVED_FORWARD=4
int8 MOVED_BACKWARD=5
int8 DISAPPEARED=6
int8 VANISHED=7
int8 ROTATED_CW=8
int8 ROTATED_CCW=9
int8 TOPPLED_RGT=10
int8 TOPPLED_LFT=11
int8 TOPPLED_FWD=12
int8 TOPPLED_BWD=13
int8 ROLLED_RIGHT=14
int8 ROLLED_LEFT=15
int8 ROLLED_FORWARD=16
int8 ROLLED_BACKWARD=17
int8 GRASPED=18
int8 ACQUIRED=19
int8 RELEASED=20
int8 TAKEN=21
int8 GIVEN=22
int8 GOT_ATTENTION=23
int8 TOPPLED=24
int8 GOT_SEATED=25
int8 GOT_CLOSER=26
int8 GOT_FURTHER=27
int8 STOOD_UP=28
int8 WENT_AWAY=29

#later arg can be made vector if multiple effect
#instances to be captured in one action application
int8 effect
int8 arg
float32 prob #probability of this effect to occur, this is set by "learning"

"""
  # Pseudo-constants
  MAX_EFFECT_INDEX = 29
  NO_CHANGE = 0
  REACHED = 1
  MOVED_RIGHT = 2
  MOVED_LEFT = 3
  MOVED_FORWARD = 4
  MOVED_BACKWARD = 5
  DISAPPEARED = 6
  VANISHED = 7
  ROTATED_CW = 8
  ROTATED_CCW = 9
  TOPPLED_RGT = 10
  TOPPLED_LFT = 11
  TOPPLED_FWD = 12
  TOPPLED_BWD = 13
  ROLLED_RIGHT = 14
  ROLLED_LEFT = 15
  ROLLED_FORWARD = 16
  ROLLED_BACKWARD = 17
  GRASPED = 18
  ACQUIRED = 19
  RELEASED = 20
  TAKEN = 21
  GIVEN = 22
  GOT_ATTENTION = 23
  TOPPLED = 24
  GOT_SEATED = 25
  GOT_CLOSER = 26
  GOT_FURTHER = 27
  STOOD_UP = 28
  WENT_AWAY = 29

  __slots__ = ['effect','arg','prob']
  _slot_types = ['int8','int8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       effect,arg,prob

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Effect, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.effect is None:
        self.effect = 0
      if self.arg is None:
        self.arg = 0
      if self.prob is None:
        self.prob = 0.
    else:
      self.effect = 0
      self.arg = 0
      self.prob = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2bf.pack(_x.effect, _x.arg, _x.prob))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.effect, _x.arg, _x.prob,) = _struct_2bf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2bf.pack(_x.effect, _x.arg, _x.prob))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.effect, _x.arg, _x.prob,) = _struct_2bf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2bf = struct.Struct("<2bf")

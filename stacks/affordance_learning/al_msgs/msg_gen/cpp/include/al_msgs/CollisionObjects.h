/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_msgs/msg/CollisionObjects.msg */
#ifndef AL_MSGS_MESSAGE_COLLISIONOBJECTS_H
#define AL_MSGS_MESSAGE_COLLISIONOBJECTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "arm_navigation_msgs/CollisionObject.h"

namespace al_msgs
{
template <class ContainerAllocator>
struct CollisionObjects_ {
  typedef CollisionObjects_<ContainerAllocator> Type;

  CollisionObjects_()
  : collision_objects()
  {
  }

  CollisionObjects_(const ContainerAllocator& _alloc)
  : collision_objects(_alloc)
  {
  }

  typedef std::vector< ::arm_navigation_msgs::CollisionObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::CollisionObject_<ContainerAllocator> >::other >  _collision_objects_type;
  std::vector< ::arm_navigation_msgs::CollisionObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::CollisionObject_<ContainerAllocator> >::other >  collision_objects;


  typedef boost::shared_ptr< ::al_msgs::CollisionObjects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_msgs::CollisionObjects_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CollisionObjects
typedef  ::al_msgs::CollisionObjects_<std::allocator<void> > CollisionObjects;

typedef boost::shared_ptr< ::al_msgs::CollisionObjects> CollisionObjectsPtr;
typedef boost::shared_ptr< ::al_msgs::CollisionObjects const> CollisionObjectsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_msgs::CollisionObjects_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_msgs::CollisionObjects_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_msgs::CollisionObjects_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_msgs::CollisionObjects_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_msgs::CollisionObjects_<ContainerAllocator> > {
  static const char* value() 
  {
    return "df3391950c68dabfcac9cffccabc9d5d";
  }

  static const char* value(const  ::al_msgs::CollisionObjects_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdf3391950c68dabfULL;
  static const uint64_t static_value2 = 0xcac9cffccabc9d5dULL;
};

template<class ContainerAllocator>
struct DataType< ::al_msgs::CollisionObjects_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/CollisionObjects";
  }

  static const char* value(const  ::al_msgs::CollisionObjects_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_msgs::CollisionObjects_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/CollisionObject[] collision_objects # 0 id is for table, and the rest for the tabletop objects\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/CollisionObject\n\
# a header, used for interpreting the poses\n\
Header header\n\
\n\
# the id of the object\n\
string id\n\
\n\
# The padding used for filtering points near the object.\n\
# This does not affect collision checking for the object.  \n\
# Set to negative to get zero padding.\n\
float32 padding\n\
\n\
#This contains what is to be done with the object\n\
CollisionObjectOperation operation\n\
\n\
#the shapes associated with the object\n\
arm_navigation_msgs/Shape[] shapes\n\
\n\
#the poses associated with the shapes - will be transformed using the header\n\
geometry_msgs/Pose[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/CollisionObjectOperation\n\
#Puts the object into the environment\n\
#or updates the object if already added\n\
byte ADD=0\n\
\n\
#Removes the object from the environment entirely\n\
byte REMOVE=1\n\
\n\
#Only valid within the context of a CollisionAttachedObject message\n\
#Will be ignored if sent with an CollisionObject message\n\
#Takes an attached object, detaches from the attached link\n\
#But adds back in as regular object\n\
byte DETACH_AND_ADD_AS_OBJECT=2\n\
\n\
#Only valid within the context of a CollisionAttachedObject message\n\
#Will be ignored if sent with an CollisionObject message\n\
#Takes current object in the environment and removes it as\n\
#a regular object\n\
byte ATTACH_AND_REMOVE_AS_OBJECT=3\n\
\n\
# Byte code for operation\n\
byte operation\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/Shape\n\
byte SPHERE=0\n\
byte BOX=1\n\
byte CYLINDER=2\n\
byte MESH=3\n\
\n\
byte type\n\
\n\
\n\
#### define sphere, box, cylinder ####\n\
# the origin of each shape is considered at the shape's center\n\
\n\
# for sphere\n\
# radius := dimensions[0]\n\
\n\
# for cylinder\n\
# radius := dimensions[0]\n\
# length := dimensions[1]\n\
# the length is along the Z axis\n\
\n\
# for box\n\
# size_x := dimensions[0]\n\
# size_y := dimensions[1]\n\
# size_z := dimensions[2]\n\
float64[] dimensions\n\
\n\
\n\
#### define mesh ####\n\
\n\
# list of triangles; triangle k is defined by tre vertices located\n\
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]\n\
int32[] triangles\n\
geometry_msgs/Point[] vertices\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::al_msgs::CollisionObjects_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_msgs::CollisionObjects_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.collision_objects);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CollisionObjects_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_msgs::CollisionObjects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_msgs::CollisionObjects_<ContainerAllocator> & v) 
  {
    s << indent << "collision_objects[]" << std::endl;
    for (size_t i = 0; i < v.collision_objects.size(); ++i)
    {
      s << indent << "  collision_objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::arm_navigation_msgs::CollisionObject_<ContainerAllocator> >::stream(s, indent + "    ", v.collision_objects[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_MSGS_MESSAGE_COLLISIONOBJECTS_H


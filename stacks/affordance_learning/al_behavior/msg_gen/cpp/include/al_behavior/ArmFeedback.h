/* Auto-generated by genmsg_cpp for file /home/user/metu-ros-pkg/affordance_learning/al_behavior/msg/ArmFeedback.msg */
#ifndef AL_BEHAVIOR_MESSAGE_ARMFEEDBACK_H
#define AL_BEHAVIOR_MESSAGE_ARMFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "al_msgs/JointCmd.h"
#include "geometry_msgs/Pose.h"

namespace al_behavior
{
template <class ContainerAllocator>
struct ArmFeedback_ {
  typedef ArmFeedback_<ContainerAllocator> Type;

  ArmFeedback_()
  : feed_mode(false)
  , feed_joint_pos()
  , feed_cartesian_pos()
  {
  }

  ArmFeedback_(const ContainerAllocator& _alloc)
  : feed_mode(false)
  , feed_joint_pos(_alloc)
  , feed_cartesian_pos(_alloc)
  {
  }

  typedef uint8_t _feed_mode_type;
  uint8_t feed_mode;

  typedef std::vector< ::al_msgs::JointCmd_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::al_msgs::JointCmd_<ContainerAllocator> >::other >  _feed_joint_pos_type;
  std::vector< ::al_msgs::JointCmd_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::al_msgs::JointCmd_<ContainerAllocator> >::other >  feed_joint_pos;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _feed_cartesian_pos_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  feed_cartesian_pos;


  typedef boost::shared_ptr< ::al_behavior::ArmFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_behavior::ArmFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ArmFeedback
typedef  ::al_behavior::ArmFeedback_<std::allocator<void> > ArmFeedback;

typedef boost::shared_ptr< ::al_behavior::ArmFeedback> ArmFeedbackPtr;
typedef boost::shared_ptr< ::al_behavior::ArmFeedback const> ArmFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_behavior::ArmFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_behavior::ArmFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_behavior

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_behavior::ArmFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_behavior::ArmFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_behavior::ArmFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "711bb2786f95618dccc9060d209afdec";
  }

  static const char* value(const  ::al_behavior::ArmFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x711bb2786f95618dULL;
  static const uint64_t static_value2 = 0xccc9060d209afdecULL;
};

template<class ContainerAllocator>
struct DataType< ::al_behavior::ArmFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_behavior/ArmFeedback";
  }

  static const char* value(const  ::al_behavior::ArmFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_behavior::ArmFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback\n\
bool feed_mode\n\
al_msgs/JointCmd[] feed_joint_pos\n\
geometry_msgs/Pose feed_cartesian_pos\n\
\n\
\n\
================================================================================\n\
MSG: al_msgs/JointCmd\n\
uint8 joint_id\n\
float64 joint_val\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::al_behavior::ArmFeedback_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_behavior::ArmFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.feed_mode);
    stream.next(m.feed_joint_pos);
    stream.next(m.feed_cartesian_pos);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ArmFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_behavior::ArmFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_behavior::ArmFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "feed_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.feed_mode);
    s << indent << "feed_joint_pos[]" << std::endl;
    for (size_t i = 0; i < v.feed_joint_pos.size(); ++i)
    {
      s << indent << "  feed_joint_pos[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::al_msgs::JointCmd_<ContainerAllocator> >::stream(s, indent + "    ", v.feed_joint_pos[i]);
    }
    s << indent << "feed_cartesian_pos: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.feed_cartesian_pos);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_BEHAVIOR_MESSAGE_ARMFEEDBACK_H


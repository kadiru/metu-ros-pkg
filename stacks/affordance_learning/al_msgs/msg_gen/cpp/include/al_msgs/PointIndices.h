/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_msgs/msg/PointIndices.msg */
#ifndef AL_MSGS_MESSAGE_POINTINDICES_H
#define AL_MSGS_MESSAGE_POINTINDICES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace al_msgs
{
template <class ContainerAllocator>
struct PointIndices_ {
  typedef PointIndices_<ContainerAllocator> Type;

  PointIndices_()
  : indices()
  {
  }

  PointIndices_(const ContainerAllocator& _alloc)
  : indices(_alloc)
  {
  }

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _indices_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  indices;


  typedef boost::shared_ptr< ::al_msgs::PointIndices_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_msgs::PointIndices_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PointIndices
typedef  ::al_msgs::PointIndices_<std::allocator<void> > PointIndices;

typedef boost::shared_ptr< ::al_msgs::PointIndices> PointIndicesPtr;
typedef boost::shared_ptr< ::al_msgs::PointIndices const> PointIndicesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_msgs::PointIndices_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_msgs::PointIndices_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_msgs::PointIndices_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_msgs::PointIndices_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_msgs::PointIndices_<ContainerAllocator> > {
  static const char* value() 
  {
    return "64d9930e0b9b55c3e790bbd2fedabd22";
  }

  static const char* value(const  ::al_msgs::PointIndices_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x64d9930e0b9b55c3ULL;
  static const uint64_t static_value2 = 0xe790bbd2fedabd22ULL;
};

template<class ContainerAllocator>
struct DataType< ::al_msgs::PointIndices_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/PointIndices";
  }

  static const char* value(const  ::al_msgs::PointIndices_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_msgs::PointIndices_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32[] indices\n\
\n\
\n\
";
  }

  static const char* value(const  ::al_msgs::PointIndices_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_msgs::PointIndices_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.indices);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PointIndices_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_msgs::PointIndices_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_msgs::PointIndices_<ContainerAllocator> & v) 
  {
    s << indent << "indices[]" << std::endl;
    for (size_t i = 0; i < v.indices.size(); ++i)
    {
      s << indent << "  indices[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.indices[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_MSGS_MESSAGE_POINTINDICES_H


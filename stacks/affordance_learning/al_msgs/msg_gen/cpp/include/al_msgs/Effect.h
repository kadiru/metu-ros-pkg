/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_msgs/msg/Effect.msg */
#ifndef AL_MSGS_MESSAGE_EFFECT_H
#define AL_MSGS_MESSAGE_EFFECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace al_msgs
{
template <class ContainerAllocator>
struct Effect_ {
  typedef Effect_<ContainerAllocator> Type;

  Effect_()
  : effect(0)
  , arg(0)
  , prob(0.0)
  {
  }

  Effect_(const ContainerAllocator& _alloc)
  : effect(0)
  , arg(0)
  , prob(0.0)
  {
  }

  typedef int8_t _effect_type;
  int8_t effect;

  typedef int8_t _arg_type;
  int8_t arg;

  typedef float _prob_type;
  float prob;

  enum { MAX_EFFECT_INDEX = 29 };
  enum { NO_CHANGE = 0 };
  enum { REACHED = 1 };
  enum { MOVED_RIGHT = 2 };
  enum { MOVED_LEFT = 3 };
  enum { MOVED_FORWARD = 4 };
  enum { MOVED_BACKWARD = 5 };
  enum { DISAPPEARED = 6 };
  enum { VANISHED = 7 };
  enum { ROTATED_CW = 8 };
  enum { ROTATED_CCW = 9 };
  enum { TOPPLED_RGT = 10 };
  enum { TOPPLED_LFT = 11 };
  enum { TOPPLED_FWD = 12 };
  enum { TOPPLED_BWD = 13 };
  enum { ROLLED_RIGHT = 14 };
  enum { ROLLED_LEFT = 15 };
  enum { ROLLED_FORWARD = 16 };
  enum { ROLLED_BACKWARD = 17 };
  enum { GRASPED = 18 };
  enum { ACQUIRED = 19 };
  enum { RELEASED = 20 };
  enum { TAKEN = 21 };
  enum { GIVEN = 22 };
  enum { GOT_ATTENTION = 23 };
  enum { TOPPLED = 24 };
  enum { GOT_SEATED = 25 };
  enum { GOT_CLOSER = 26 };
  enum { GOT_FURTHER = 27 };
  enum { STOOD_UP = 28 };
  enum { WENT_AWAY = 29 };

  typedef boost::shared_ptr< ::al_msgs::Effect_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_msgs::Effect_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Effect
typedef  ::al_msgs::Effect_<std::allocator<void> > Effect;

typedef boost::shared_ptr< ::al_msgs::Effect> EffectPtr;
typedef boost::shared_ptr< ::al_msgs::Effect const> EffectConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_msgs::Effect_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_msgs::Effect_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Effect_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Effect_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_msgs::Effect_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a11ba7b642f4188ac273956115353b83";
  }

  static const char* value(const  ::al_msgs::Effect_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa11ba7b642f4188aULL;
  static const uint64_t static_value2 = 0xc273956115353b83ULL;
};

template<class ContainerAllocator>
struct DataType< ::al_msgs::Effect_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/Effect";
  }

  static const char* value(const  ::al_msgs::Effect_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_msgs::Effect_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 MAX_EFFECT_INDEX = 29\n\
\n\
int8 NO_CHANGE=0\n\
int8 REACHED=1\n\
int8 MOVED_RIGHT=2\n\
int8 MOVED_LEFT=3\n\
int8 MOVED_FORWARD=4\n\
int8 MOVED_BACKWARD=5\n\
int8 DISAPPEARED=6\n\
int8 VANISHED=7\n\
int8 ROTATED_CW=8\n\
int8 ROTATED_CCW=9\n\
int8 TOPPLED_RGT=10\n\
int8 TOPPLED_LFT=11\n\
int8 TOPPLED_FWD=12\n\
int8 TOPPLED_BWD=13\n\
int8 ROLLED_RIGHT=14\n\
int8 ROLLED_LEFT=15\n\
int8 ROLLED_FORWARD=16\n\
int8 ROLLED_BACKWARD=17\n\
int8 GRASPED=18\n\
int8 ACQUIRED=19\n\
int8 RELEASED=20\n\
int8 TAKEN=21\n\
int8 GIVEN=22\n\
int8 GOT_ATTENTION=23\n\
int8 TOPPLED=24\n\
int8 GOT_SEATED=25\n\
int8 GOT_CLOSER=26\n\
int8 GOT_FURTHER=27\n\
int8 STOOD_UP=28\n\
int8 WENT_AWAY=29\n\
\n\
#later arg can be made vector if multiple effect\n\
#instances to be captured in one action application\n\
int8 effect\n\
int8 arg\n\
float32 prob #probability of this effect to occur, this is set by \"learning\"\n\
\n\
";
  }

  static const char* value(const  ::al_msgs::Effect_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::al_msgs::Effect_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_msgs::Effect_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.effect);
    stream.next(m.arg);
    stream.next(m.prob);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Effect_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_msgs::Effect_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_msgs::Effect_<ContainerAllocator> & v) 
  {
    s << indent << "effect: ";
    Printer<int8_t>::stream(s, indent + "  ", v.effect);
    s << indent << "arg: ";
    Printer<int8_t>::stream(s, indent + "  ", v.arg);
    s << indent << "prob: ";
    Printer<float>::stream(s, indent + "  ", v.prob);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_MSGS_MESSAGE_EFFECT_H


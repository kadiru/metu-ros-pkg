/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_srvs/srv/PerceptionAll.srv */
#ifndef AL_SRVS_SERVICE_PERCEPTIONALL_H
#define AL_SRVS_SERVICE_PERCEPTIONALL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "sensor_msgs/PointCloud2.h"
#include "sensor_msgs/PointCloud2.h"
#include "sensor_msgs/PointCloud2.h"
#include "al_msgs/FeatureVectorVector.h"

namespace al_srvs
{
template <class ContainerAllocator>
struct PerceptionAllRequest_ {
  typedef PerceptionAllRequest_<ContainerAllocator> Type;

  PerceptionAllRequest_()
  : task(0)
  {
  }

  PerceptionAllRequest_(const ContainerAllocator& _alloc)
  : task(0)
  {
  }

  typedef uint8_t _task_type;
  uint8_t task;


  typedef boost::shared_ptr< ::al_srvs::PerceptionAllRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_srvs::PerceptionAllRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PerceptionAllRequest
typedef  ::al_srvs::PerceptionAllRequest_<std::allocator<void> > PerceptionAllRequest;

typedef boost::shared_ptr< ::al_srvs::PerceptionAllRequest> PerceptionAllRequestPtr;
typedef boost::shared_ptr< ::al_srvs::PerceptionAllRequest const> PerceptionAllRequestConstPtr;


template <class ContainerAllocator>
struct PerceptionAllResponse_ {
  typedef PerceptionAllResponse_<ContainerAllocator> Type;

  PerceptionAllResponse_()
  : pushable_object_centers()
  , pushable_object_sizes()
  , pushable_object_ids()
  , pushable_object_features()
  {
  }

  PerceptionAllResponse_(const ContainerAllocator& _alloc)
  : pushable_object_centers(_alloc)
  , pushable_object_sizes(_alloc)
  , pushable_object_ids(_alloc)
  , pushable_object_features(_alloc)
  {
  }

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _pushable_object_centers_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  pushable_object_centers;

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _pushable_object_sizes_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  pushable_object_sizes;

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _pushable_object_ids_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  pushable_object_ids;

  typedef  ::al_msgs::FeatureVectorVector_<ContainerAllocator>  _pushable_object_features_type;
   ::al_msgs::FeatureVectorVector_<ContainerAllocator>  pushable_object_features;

  enum { DONE = 1 };

  typedef boost::shared_ptr< ::al_srvs::PerceptionAllResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_srvs::PerceptionAllResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PerceptionAllResponse
typedef  ::al_srvs::PerceptionAllResponse_<std::allocator<void> > PerceptionAllResponse;

typedef boost::shared_ptr< ::al_srvs::PerceptionAllResponse> PerceptionAllResponsePtr;
typedef boost::shared_ptr< ::al_srvs::PerceptionAllResponse const> PerceptionAllResponseConstPtr;

struct PerceptionAll
{

typedef PerceptionAllRequest Request;
typedef PerceptionAllResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PerceptionAll
} // namespace al_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_srvs::PerceptionAllRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_srvs::PerceptionAllRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_srvs::PerceptionAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cfae433ef22bd8313f92bc5cad00c264";
  }

  static const char* value(const  ::al_srvs::PerceptionAllRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcfae433ef22bd831ULL;
  static const uint64_t static_value2 = 0x3f92bc5cad00c264ULL;
};

template<class ContainerAllocator>
struct DataType< ::al_srvs::PerceptionAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_srvs/PerceptionAllRequest";
  }

  static const char* value(const  ::al_srvs::PerceptionAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_srvs::PerceptionAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 task\n\
\n\
";
  }

  static const char* value(const  ::al_srvs::PerceptionAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::al_srvs::PerceptionAllRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_srvs::PerceptionAllResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_srvs::PerceptionAllResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_srvs::PerceptionAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d6024c615b734c3eb28a7393ff152be0";
  }

  static const char* value(const  ::al_srvs::PerceptionAllResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd6024c615b734c3eULL;
  static const uint64_t static_value2 = 0xb28a7393ff152be0ULL;
};

template<class ContainerAllocator>
struct DataType< ::al_srvs::PerceptionAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_srvs/PerceptionAllResponse";
  }

  static const char* value(const  ::al_srvs::PerceptionAllResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_srvs::PerceptionAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
uint8 DONE = 1\n\
sensor_msgs/PointCloud2 pushable_object_centers\n\
sensor_msgs/PointCloud2 pushable_object_sizes\n\
sensor_msgs/PointCloud2 pushable_object_ids\n\
al_msgs/FeatureVectorVector pushable_object_features\n\
\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
================================================================================\n\
MSG: al_msgs/FeatureVectorVector\n\
al_msgs/FeatureVector[] features\n\
\n\
================================================================================\n\
MSG: al_msgs/FeatureVector\n\
al_msgs/Feature[] features\n\
\n\
================================================================================\n\
MSG: al_msgs/Feature\n\
float32 min # min value\n\
float32 max # max value\n\
float32 avg # average value\n\
float32 var # variance\n\
float32 dev # standard deviation\n\
float32[] his # histogram\n\
std_msgs/Time stamp # time stamp when this feature is calculated\n\
float32 range_min # min value that this feature can get\n\
float32 range_max # max value that this feature can get\n\
int16 n_hist_bins # number of bins in its histogram\n\
string NORMAL_AZI=NormalAzimuth\n\
string NORMAL_ZEN=NormalZenith\n\
string CURV_MIN=MinCurvature\n\
string CURV_MAX=MaxCurvature\n\
string CURV_MEAN=MeanCurvature\n\
string CURV_GAUSS=GaussCurvature\n\
string SHAPE_INDEX=ShapeIndex\n\
string R_COLOR=RedColor\n\
string G_COLOR=GreenColor\n\
string B_COLOR=BlueColor\n\
string POS_X=PositionX\n\
string POS_Y=PositionY\n\
string POS_Z=PositionZ\n\
string ROT_T=RotationTheta\n\
string DIM_X=DimensionX\n\
string DIM_Y=DimensionY\n\
string DIM_Z=DimensionZ\n\
string OBJECT_PRESENCE=ObjectPresence\n\
string HUMAN_TORSO_X=HumanTorsoX\n\
string HUMAN_TORSO_Y=HumanTorsoY\n\
string HUMAN_TORSO_Z=HumanTorsoZ\n\
string HUMAN_TORSO_ROLL=HumanTorsoRoll\n\
string HUMAN_TORSO_PITCH=HumanTorsoPitch\n\
string HUMAN_TORSO_YAW=HumanTorsoYaw\n\
string HUMAN_HEAD_ROLL=HumanHeadRoll\n\
string HUMAN_HEAD_PITCH=HumanHeadPitch\n\
string HUMAN_HEAD_YAW=HumanHeadYaw\n\
string HUMAN_PRESENCE=HumanPresence\n\
string AFFORDANCE_ACC=AffordanceAccuracy\n\
string type\n\
string DISPERSIVE_VALUED=DispersiveValued\n\
string SINGLE_VALUED=SingleValued\n\
string val_type\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Time\n\
time data\n\
\n\
";
  }

  static const char* value(const  ::al_srvs::PerceptionAllResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_srvs::PerceptionAllRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.task);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PerceptionAllRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_srvs::PerceptionAllResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pushable_object_centers);
    stream.next(m.pushable_object_sizes);
    stream.next(m.pushable_object_ids);
    stream.next(m.pushable_object_features);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PerceptionAllResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<al_srvs::PerceptionAll> {
  static const char* value() 
  {
    return "2c61a928039763c8b292cbae619b5a2e";
  }

  static const char* value(const al_srvs::PerceptionAll&) { return value(); } 
};

template<>
struct DataType<al_srvs::PerceptionAll> {
  static const char* value() 
  {
    return "al_srvs/PerceptionAll";
  }

  static const char* value(const al_srvs::PerceptionAll&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<al_srvs::PerceptionAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2c61a928039763c8b292cbae619b5a2e";
  }

  static const char* value(const al_srvs::PerceptionAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<al_srvs::PerceptionAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_srvs/PerceptionAll";
  }

  static const char* value(const al_srvs::PerceptionAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<al_srvs::PerceptionAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2c61a928039763c8b292cbae619b5a2e";
  }

  static const char* value(const al_srvs::PerceptionAllResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<al_srvs::PerceptionAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_srvs/PerceptionAll";
  }

  static const char* value(const al_srvs::PerceptionAllResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // AL_SRVS_SERVICE_PERCEPTIONALL_H


/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_ext_utils/tabletop_collision_map_processing/srv/TabletopCollisionMapProcessing.srv */
#ifndef TABLETOP_COLLISION_MAP_PROCESSING_SERVICE_TABLETOPCOLLISIONMAPPROCESSING_H
#define TABLETOP_COLLISION_MAP_PROCESSING_SERVICE_TABLETOPCOLLISIONMAPPROCESSING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "tabletop_object_detector/TabletopDetectionResult.h"


#include "object_manipulation_msgs/GraspableObject.h"

namespace tabletop_collision_map_processing
{
template <class ContainerAllocator>
struct TabletopCollisionMapProcessingRequest_ {
  typedef TabletopCollisionMapProcessingRequest_<ContainerAllocator> Type;

  TabletopCollisionMapProcessingRequest_()
  : detection_result()
  , reset_collision_models(false)
  , reset_attached_models(false)
  , desired_frame()
  {
  }

  TabletopCollisionMapProcessingRequest_(const ContainerAllocator& _alloc)
  : detection_result(_alloc)
  , reset_collision_models(false)
  , reset_attached_models(false)
  , desired_frame(_alloc)
  {
  }

  typedef  ::tabletop_object_detector::TabletopDetectionResult_<ContainerAllocator>  _detection_result_type;
   ::tabletop_object_detector::TabletopDetectionResult_<ContainerAllocator>  detection_result;

  typedef uint8_t _reset_collision_models_type;
  uint8_t reset_collision_models;

  typedef uint8_t _reset_attached_models_type;
  uint8_t reset_attached_models;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _desired_frame_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  desired_frame;


  typedef boost::shared_ptr< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TabletopCollisionMapProcessingRequest
typedef  ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<std::allocator<void> > TabletopCollisionMapProcessingRequest;

typedef boost::shared_ptr< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest> TabletopCollisionMapProcessingRequestPtr;
typedef boost::shared_ptr< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest const> TabletopCollisionMapProcessingRequestConstPtr;


template <class ContainerAllocator>
struct TabletopCollisionMapProcessingResponse_ {
  typedef TabletopCollisionMapProcessingResponse_<ContainerAllocator> Type;

  TabletopCollisionMapProcessingResponse_()
  : graspable_objects()
  , collision_object_names()
  , collision_support_surface_name()
  {
  }

  TabletopCollisionMapProcessingResponse_(const ContainerAllocator& _alloc)
  : graspable_objects(_alloc)
  , collision_object_names(_alloc)
  , collision_support_surface_name(_alloc)
  {
  }

  typedef std::vector< ::object_manipulation_msgs::GraspableObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_manipulation_msgs::GraspableObject_<ContainerAllocator> >::other >  _graspable_objects_type;
  std::vector< ::object_manipulation_msgs::GraspableObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_manipulation_msgs::GraspableObject_<ContainerAllocator> >::other >  graspable_objects;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _collision_object_names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  collision_object_names;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _collision_support_surface_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  collision_support_surface_name;


  typedef boost::shared_ptr< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TabletopCollisionMapProcessingResponse
typedef  ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<std::allocator<void> > TabletopCollisionMapProcessingResponse;

typedef boost::shared_ptr< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse> TabletopCollisionMapProcessingResponsePtr;
typedef boost::shared_ptr< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse const> TabletopCollisionMapProcessingResponseConstPtr;

struct TabletopCollisionMapProcessing
{

typedef TabletopCollisionMapProcessingRequest Request;
typedef TabletopCollisionMapProcessingResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct TabletopCollisionMapProcessing
} // namespace tabletop_collision_map_processing

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fe986e22908c7a2936a0cdf9f240d4a3";
  }

  static const char* value(const  ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfe986e22908c7a29ULL;
  static const uint64_t static_value2 = 0x36a0cdf9f240d4a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tabletop_collision_map_processing/TabletopCollisionMapProcessingRequest";
  }

  static const char* value(const  ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
\n\
\n\
\n\
tabletop_object_detector/TabletopDetectionResult detection_result\n\
\n\
\n\
bool reset_collision_models\n\
\n\
\n\
bool reset_attached_models\n\
\n\
\n\
\n\
string desired_frame\n\
\n\
\n\
================================================================================\n\
MSG: tabletop_object_detector/TabletopDetectionResult\n\
# Contains all the information from one run of the tabletop detection node\n\
\n\
# The information for the plane that has been detected\n\
Table table\n\
\n\
# The raw clusters detected in the scan \n\
sensor_msgs/PointCloud[] clusters\n\
\n\
# The list of potential models that have been detected for each cluster\n\
# An empty list will be returned for a cluster that has no recognition results at all\n\
household_objects_database_msgs/DatabaseModelPoseList[] models\n\
\n\
# For each cluster, the index of the list of models that was fit to that cluster\n\
# keep in mind that multiple raw clusters can correspond to a single fit\n\
int32[] cluster_model_indices\n\
\n\
# Whether the detection has succeeded or failed\n\
int32 NO_CLOUD_RECEIVED = 1\n\
int32 NO_TABLE = 2\n\
int32 OTHER_ERROR = 3\n\
int32 SUCCESS = 4\n\
int32 result\n\
\n\
================================================================================\n\
MSG: tabletop_object_detector/Table\n\
# Informs that a planar table has been detected at a given location\n\
\n\
# The pose gives you the transform that take you to the coordinate system\n\
# of the table, with the origin somewhere in the table plane and the \n\
# z axis normal to the plane\n\
geometry_msgs/PoseStamped pose\n\
\n\
# These values give you the observed extents of the table, along x and y,\n\
# in the table's own coordinate system (above)\n\
# there is no guarantee that the origin of the table coordinate system is\n\
# inside the boundary defined by these values. \n\
float32 x_min\n\
float32 x_max\n\
float32 y_min\n\
float32 y_max\n\
\n\
# There is no guarantee that the table does NOT extend further than these \n\
# values; this is just as far as we've observed it.\n\
\n\
\n\
# Newer table definition as triangle mesh of convex hull (relative to pose)\n\
arm_navigation_msgs/Shape convex_hull\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/Shape\n\
byte SPHERE=0\n\
byte BOX=1\n\
byte CYLINDER=2\n\
byte MESH=3\n\
\n\
byte type\n\
\n\
\n\
#### define sphere, box, cylinder ####\n\
# the origin of each shape is considered at the shape's center\n\
\n\
# for sphere\n\
# radius := dimensions[0]\n\
\n\
# for cylinder\n\
# radius := dimensions[0]\n\
# length := dimensions[1]\n\
# the length is along the Z axis\n\
\n\
# for box\n\
# size_x := dimensions[0]\n\
# size_y := dimensions[1]\n\
# size_z := dimensions[2]\n\
float64[] dimensions\n\
\n\
\n\
#### define mesh ####\n\
\n\
# list of triangles; triangle k is defined by tre vertices located\n\
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]\n\
int32[] triangles\n\
geometry_msgs/Point[] vertices\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud\n\
# This message holds a collection of 3d points, plus optional additional\n\
# information about each point.\n\
\n\
# Time of sensor data acquisition, coordinate frame ID.\n\
Header header\n\
\n\
# Array of 3d points. Each Point32 should be interpreted as a 3d point\n\
# in the frame given in the header.\n\
geometry_msgs/Point32[] points\n\
\n\
# Each channel should have the same number of elements as points array,\n\
# and the data in each channel should correspond 1:1 with each point.\n\
# Channel names in common practice are listed in ChannelFloat32.msg.\n\
ChannelFloat32[] channels\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: sensor_msgs/ChannelFloat32\n\
# This message is used by the PointCloud message to hold optional data\n\
# associated with each point in the cloud. The length of the values\n\
# array should be the same as the length of the points array in the\n\
# PointCloud, and each value should be associated with the corresponding\n\
# point.\n\
\n\
# Channel names in existing practice include:\n\
#   \"u\", \"v\" - row and column (respectively) in the left stereo image.\n\
#              This is opposite to usual conventions but remains for\n\
#              historical reasons. The newer PointCloud2 message has no\n\
#              such problem.\n\
#   \"rgb\" - For point clouds produced by color stereo cameras. uint8\n\
#           (R,G,B) values packed into the least significant 24 bits,\n\
#           in order.\n\
#   \"intensity\" - laser or pixel intensity.\n\
#   \"distance\"\n\
\n\
# The channel name should give semantics of the channel (e.g.\n\
# \"intensity\" instead of \"value\").\n\
string name\n\
\n\
# The values array should be 1-1 with the elements of the associated\n\
# PointCloud.\n\
float32[] values\n\
\n\
================================================================================\n\
MSG: household_objects_database_msgs/DatabaseModelPoseList\n\
# stores a list of possible database models recognition results\n\
DatabaseModelPose[] model_list\n\
================================================================================\n\
MSG: household_objects_database_msgs/DatabaseModelPose\n\
# Informs that a specific model from the Model Database has been \n\
# identified at a certain location\n\
\n\
# the database id of the model\n\
int32 model_id\n\
\n\
# the pose that it can be found in\n\
geometry_msgs/PoseStamped pose\n\
\n\
# a measure of the confidence level in this detection result\n\
float32 confidence\n\
\n\
# the name of the object detector that generated this detection result\n\
string detector_name\n\
\n\
";
  }

  static const char* value(const  ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "684fb6e369cb671a9c4149f683c75e88";
  }

  static const char* value(const  ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x684fb6e369cb671aULL;
  static const uint64_t static_value2 = 0x9c4149f683c75e88ULL;
};

template<class ContainerAllocator>
struct DataType< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tabletop_collision_map_processing/TabletopCollisionMapProcessingResponse";
  }

  static const char* value(const  ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
object_manipulation_msgs/GraspableObject[] graspable_objects\n\
\n\
\n\
\n\
string[] collision_object_names\n\
\n\
\n\
string collision_support_surface_name\n\
\n\
\n\
================================================================================\n\
MSG: object_manipulation_msgs/GraspableObject\n\
# an object that the object_manipulator can work on\n\
\n\
# a graspable object can be represented in multiple ways. This message\n\
# can contain all of them. Which one is actually used is up to the receiver\n\
# of this message. When adding new representations, one must be careful that\n\
# they have reasonable lightweight defaults indicating that that particular\n\
# representation is not available.\n\
\n\
# the tf frame to be used as a reference frame when combining information from\n\
# the different representations below\n\
string reference_frame_id\n\
\n\
# potential recognition results from a database of models\n\
# all poses are relative to the object reference pose\n\
household_objects_database_msgs/DatabaseModelPose[] potential_models\n\
\n\
# the point cloud itself\n\
sensor_msgs/PointCloud cluster\n\
\n\
# a region of a PointCloud2 of interest\n\
object_manipulation_msgs/SceneRegion region\n\
\n\
# the name that this object has in the collision environment\n\
string collision_name\n\
================================================================================\n\
MSG: household_objects_database_msgs/DatabaseModelPose\n\
# Informs that a specific model from the Model Database has been \n\
# identified at a certain location\n\
\n\
# the database id of the model\n\
int32 model_id\n\
\n\
# the pose that it can be found in\n\
geometry_msgs/PoseStamped pose\n\
\n\
# a measure of the confidence level in this detection result\n\
float32 confidence\n\
\n\
# the name of the object detector that generated this detection result\n\
string detector_name\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud\n\
# This message holds a collection of 3d points, plus optional additional\n\
# information about each point.\n\
\n\
# Time of sensor data acquisition, coordinate frame ID.\n\
Header header\n\
\n\
# Array of 3d points. Each Point32 should be interpreted as a 3d point\n\
# in the frame given in the header.\n\
geometry_msgs/Point32[] points\n\
\n\
# Each channel should have the same number of elements as points array,\n\
# and the data in each channel should correspond 1:1 with each point.\n\
# Channel names in common practice are listed in ChannelFloat32.msg.\n\
ChannelFloat32[] channels\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: sensor_msgs/ChannelFloat32\n\
# This message is used by the PointCloud message to hold optional data\n\
# associated with each point in the cloud. The length of the values\n\
# array should be the same as the length of the points array in the\n\
# PointCloud, and each value should be associated with the corresponding\n\
# point.\n\
\n\
# Channel names in existing practice include:\n\
#   \"u\", \"v\" - row and column (respectively) in the left stereo image.\n\
#              This is opposite to usual conventions but remains for\n\
#              historical reasons. The newer PointCloud2 message has no\n\
#              such problem.\n\
#   \"rgb\" - For point clouds produced by color stereo cameras. uint8\n\
#           (R,G,B) values packed into the least significant 24 bits,\n\
#           in order.\n\
#   \"intensity\" - laser or pixel intensity.\n\
#   \"distance\"\n\
\n\
# The channel name should give semantics of the channel (e.g.\n\
# \"intensity\" instead of \"value\").\n\
string name\n\
\n\
# The values array should be 1-1 with the elements of the associated\n\
# PointCloud.\n\
float32[] values\n\
\n\
================================================================================\n\
MSG: object_manipulation_msgs/SceneRegion\n\
# Point cloud\n\
sensor_msgs/PointCloud2 cloud\n\
\n\
# Indices for the region of interest\n\
int32[] mask\n\
\n\
# One of the corresponding 2D images, if applicable\n\
sensor_msgs/Image image\n\
\n\
# The disparity image, if applicable\n\
sensor_msgs/Image disparity_image\n\
\n\
# Camera info for the camera that took the image\n\
sensor_msgs/CameraInfo cam_info\n\
\n\
# a 3D region of interest for grasp planning\n\
geometry_msgs/PoseStamped  roi_box_pose\n\
geometry_msgs/Vector3 	   roi_box_dims\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: sensor_msgs/CameraInfo\n\
# This message defines meta information for a camera. It should be in a\n\
# camera namespace on topic \"camera_info\" and accompanied by up to five\n\
# image topics named:\n\
#\n\
#   image_raw - raw data from the camera driver, possibly Bayer encoded\n\
#   image            - monochrome, distorted\n\
#   image_color      - color, distorted\n\
#   image_rect       - monochrome, rectified\n\
#   image_rect_color - color, rectified\n\
#\n\
# The image_pipeline contains packages (image_proc, stereo_image_proc)\n\
# for producing the four processed image topics from image_raw and\n\
# camera_info. The meaning of the camera parameters are described in\n\
# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n\
#\n\
# The image_geometry package provides a user-friendly interface to\n\
# common operations using this meta information. If you want to, e.g.,\n\
# project a 3d point into image coordinates, we strongly recommend\n\
# using image_geometry.\n\
#\n\
# If the camera is uncalibrated, the matrices D, K, R, P should be left\n\
# zeroed out. In particular, clients may assume that K[0] == 0.0\n\
# indicates an uncalibrated camera.\n\
\n\
#######################################################################\n\
#                     Image acquisition info                          #\n\
#######################################################################\n\
\n\
# Time of image acquisition, camera coordinate frame ID\n\
Header header    # Header timestamp should be acquisition time of image\n\
                 # Header frame_id should be optical frame of camera\n\
                 # origin of frame should be optical center of camera\n\
                 # +x should point to the right in the image\n\
                 # +y should point down in the image\n\
                 # +z should point into the plane of the image\n\
\n\
\n\
#######################################################################\n\
#                      Calibration Parameters                         #\n\
#######################################################################\n\
# These are fixed during camera calibration. Their values will be the #\n\
# same in all messages until the camera is recalibrated. Note that    #\n\
# self-calibrating systems may \"recalibrate\" frequently.              #\n\
#                                                                     #\n\
# The internal parameters can be used to warp a raw (distorted) image #\n\
# to:                                                                 #\n\
#   1. An undistorted image (requires D and K)                        #\n\
#   2. A rectified image (requires D, K, R)                           #\n\
# The projection matrix P projects 3D points into the rectified image.#\n\
#######################################################################\n\
\n\
# The image dimensions with which the camera was calibrated. Normally\n\
# this will be the full camera resolution in pixels.\n\
uint32 height\n\
uint32 width\n\
\n\
# The distortion model used. Supported models are listed in\n\
# sensor_msgs/distortion_models.h. For most cameras, \"plumb_bob\" - a\n\
# simple model of radial and tangential distortion - is sufficent.\n\
string distortion_model\n\
\n\
# The distortion parameters, size depending on the distortion model.\n\
# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\n\
float64[] D\n\
\n\
# Intrinsic camera matrix for the raw (distorted) images.\n\
#     [fx  0 cx]\n\
# K = [ 0 fy cy]\n\
#     [ 0  0  1]\n\
# Projects 3D points in the camera coordinate frame to 2D pixel\n\
# coordinates using the focal lengths (fx, fy) and principal point\n\
# (cx, cy).\n\
float64[9]  K # 3x3 row-major matrix\n\
\n\
# Rectification matrix (stereo cameras only)\n\
# A rotation matrix aligning the camera coordinate system to the ideal\n\
# stereo image plane so that epipolar lines in both stereo images are\n\
# parallel.\n\
float64[9]  R # 3x3 row-major matrix\n\
\n\
# Projection/camera matrix\n\
#     [fx'  0  cx' Tx]\n\
# P = [ 0  fy' cy' Ty]\n\
#     [ 0   0   1   0]\n\
# By convention, this matrix specifies the intrinsic (camera) matrix\n\
#  of the processed (rectified) image. That is, the left 3x3 portion\n\
#  is the normal camera intrinsic matrix for the rectified image.\n\
# It projects 3D points in the camera coordinate frame to 2D pixel\n\
#  coordinates using the focal lengths (fx', fy') and principal point\n\
#  (cx', cy') - these may differ from the values in K.\n\
# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will\n\
#  also have R = the identity and P[1:3,1:3] = K.\n\
# For a stereo pair, the fourth column [Tx Ty 0]' is related to the\n\
#  position of the optical center of the second camera in the first\n\
#  camera's frame. We assume Tz = 0 so both cameras are in the same\n\
#  stereo image plane. The first camera always has Tx = Ty = 0. For\n\
#  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n\
#  Tx = -fx' * B, where B is the baseline between the cameras.\n\
# Given a 3D point [X Y Z]', the projection (x, y) of the point onto\n\
#  the rectified image is given by:\n\
#  [u v w]' = P * [X Y Z 1]'\n\
#         x = u / w\n\
#         y = v / w\n\
#  This holds for both images of a stereo pair.\n\
float64[12] P # 3x4 row-major matrix\n\
\n\
\n\
#######################################################################\n\
#                      Operational Parameters                         #\n\
#######################################################################\n\
# These define the image region actually captured by the camera       #\n\
# driver. Although they affect the geometry of the output image, they #\n\
# may be changed freely without recalibrating the camera.             #\n\
#######################################################################\n\
\n\
# Binning refers here to any camera setting which combines rectangular\n\
#  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n\
#  resolution of the output image to\n\
#  (width / binning_x) x (height / binning_y).\n\
# The default values binning_x = binning_y = 0 is considered the same\n\
#  as binning_x = binning_y = 1 (no subsampling).\n\
uint32 binning_x\n\
uint32 binning_y\n\
\n\
# Region of interest (subwindow of full camera resolution), given in\n\
#  full resolution (unbinned) image coordinates. A particular ROI\n\
#  always denotes the same window of pixels on the camera sensor,\n\
#  regardless of binning settings.\n\
# The default setting of roi (all values 0) is considered the same as\n\
#  full resolution (roi.width = width, roi.height = height).\n\
RegionOfInterest roi\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.detection_result);
    stream.next(m.reset_collision_models);
    stream.next(m.reset_attached_models);
    stream.next(m.desired_frame);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TabletopCollisionMapProcessingRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.graspable_objects);
    stream.next(m.collision_object_names);
    stream.next(m.collision_support_surface_name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TabletopCollisionMapProcessingResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<tabletop_collision_map_processing::TabletopCollisionMapProcessing> {
  static const char* value() 
  {
    return "58e439dda25eed20079051e6af1b5eaa";
  }

  static const char* value(const tabletop_collision_map_processing::TabletopCollisionMapProcessing&) { return value(); } 
};

template<>
struct DataType<tabletop_collision_map_processing::TabletopCollisionMapProcessing> {
  static const char* value() 
  {
    return "tabletop_collision_map_processing/TabletopCollisionMapProcessing";
  }

  static const char* value(const tabletop_collision_map_processing::TabletopCollisionMapProcessing&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "58e439dda25eed20079051e6af1b5eaa";
  }

  static const char* value(const tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tabletop_collision_map_processing/TabletopCollisionMapProcessing";
  }

  static const char* value(const tabletop_collision_map_processing::TabletopCollisionMapProcessingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "58e439dda25eed20079051e6af1b5eaa";
  }

  static const char* value(const tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tabletop_collision_map_processing/TabletopCollisionMapProcessing";
  }

  static const char* value(const tabletop_collision_map_processing::TabletopCollisionMapProcessingResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TABLETOP_COLLISION_MAP_PROCESSING_SERVICE_TABLETOPCOLLISIONMAPPROCESSING_H


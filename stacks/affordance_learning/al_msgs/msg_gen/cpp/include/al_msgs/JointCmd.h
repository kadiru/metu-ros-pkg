/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_msgs/msg/JointCmd.msg */
#ifndef AL_MSGS_MESSAGE_JOINTCMD_H
#define AL_MSGS_MESSAGE_JOINTCMD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace al_msgs
{
template <class ContainerAllocator>
struct JointCmd_ {
  typedef JointCmd_<ContainerAllocator> Type;

  JointCmd_()
  : joint_id(0)
  , joint_val(0.0)
  {
  }

  JointCmd_(const ContainerAllocator& _alloc)
  : joint_id(0)
  , joint_val(0.0)
  {
  }

  typedef uint8_t _joint_id_type;
  uint8_t joint_id;

  typedef double _joint_val_type;
  double joint_val;


  typedef boost::shared_ptr< ::al_msgs::JointCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_msgs::JointCmd_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JointCmd
typedef  ::al_msgs::JointCmd_<std::allocator<void> > JointCmd;

typedef boost::shared_ptr< ::al_msgs::JointCmd> JointCmdPtr;
typedef boost::shared_ptr< ::al_msgs::JointCmd const> JointCmdConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_msgs::JointCmd_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_msgs::JointCmd_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_msgs::JointCmd_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_msgs::JointCmd_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_msgs::JointCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b2a85fe70feb7b1c690f154e093b79e0";
  }

  static const char* value(const  ::al_msgs::JointCmd_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb2a85fe70feb7b1cULL;
  static const uint64_t static_value2 = 0x690f154e093b79e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::al_msgs::JointCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/JointCmd";
  }

  static const char* value(const  ::al_msgs::JointCmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_msgs::JointCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 joint_id\n\
float64 joint_val\n\
\n\
";
  }

  static const char* value(const  ::al_msgs::JointCmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::al_msgs::JointCmd_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_msgs::JointCmd_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint_id);
    stream.next(m.joint_val);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointCmd_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_msgs::JointCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_msgs::JointCmd_<ContainerAllocator> & v) 
  {
    s << indent << "joint_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joint_id);
    s << indent << "joint_val: ";
    Printer<double>::stream(s, indent + "  ", v.joint_val);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_MSGS_MESSAGE_JOINTCMD_H


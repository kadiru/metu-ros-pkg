/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_msgs/msg/Speech.msg */
#ifndef AL_MSGS_MESSAGE_SPEECH_H
#define AL_MSGS_MESSAGE_SPEECH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "al_msgs/Behavior.h"
#include "al_msgs/Effect.h"
#include "al_msgs/Spec.h"

namespace al_msgs
{
template <class ContainerAllocator>
struct Speech_ {
  typedef Speech_<ContainerAllocator> Type;

  Speech_()
  : behavior()
  , effect()
  , adjective()
  {
  }

  Speech_(const ContainerAllocator& _alloc)
  : behavior(_alloc)
  , effect(_alloc)
  , adjective(_alloc)
  {
  }

  typedef  ::al_msgs::Behavior_<ContainerAllocator>  _behavior_type;
   ::al_msgs::Behavior_<ContainerAllocator>  behavior;

  typedef  ::al_msgs::Effect_<ContainerAllocator>  _effect_type;
   ::al_msgs::Effect_<ContainerAllocator>  effect;

  typedef  ::al_msgs::Spec_<ContainerAllocator>  _adjective_type;
   ::al_msgs::Spec_<ContainerAllocator>  adjective;


  typedef boost::shared_ptr< ::al_msgs::Speech_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_msgs::Speech_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Speech
typedef  ::al_msgs::Speech_<std::allocator<void> > Speech;

typedef boost::shared_ptr< ::al_msgs::Speech> SpeechPtr;
typedef boost::shared_ptr< ::al_msgs::Speech const> SpeechConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_msgs::Speech_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_msgs::Speech_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Speech_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Speech_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_msgs::Speech_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b9404d5cecf887d594cef90778fc2d39";
  }

  static const char* value(const  ::al_msgs::Speech_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb9404d5cecf887d5ULL;
  static const uint64_t static_value2 = 0x94cef90778fc2d39ULL;
};

template<class ContainerAllocator>
struct DataType< ::al_msgs::Speech_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/Speech";
  }

  static const char* value(const  ::al_msgs::Speech_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_msgs::Speech_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Behavior behavior\n\
Effect effect\n\
Spec adjective\n\
\n\
================================================================================\n\
MSG: al_msgs/Behavior\n\
int8 MAX_BEHAVIOR_INDEX = 36\n\
\n\
int8 TUCK_ARMS = 0\n\
int8 REACH = 1\n\
int8 COVER = 2\n\
int8 CALL = 3\n\
int8 TAKE = 4\n\
int8 GIVE = 5\n\
int8 GRASP_TOP = 6\n\
int8 GRASP_SIDE = 7\n\
int8 PUSH_RGT = 8\n\
int8 PUSH_LFT = 9\n\
int8 PUSH_FWD = 10\n\
int8 PUSH_BWD = 11\n\
int8 PUSH_TOP_RGT = 12\n\
int8 PUSH_TOP_LFT = 13\n\
int8 PUSH_TOP_FWD = 14\n\
int8 PUSH_TOP_BWD = 15\n\
int8 POINT=16\n\
int8 HIDE=17\n\
int8 CANCEL=18\n\
int8 STOP=19\n\
int8 SHOW=20\n\
int8 HOME=21\n\
int8 LOOK_AT_REGION=22\n\
int8 LOOK_AT_POINT=23\n\
int8 LOOK_AT_FACE=24\n\
int8 LIFT=25\n\
int8 RELEASE=26\n\
int8 CONTINUE=27\n\
int8 SAY_PASS_ME=28\n\
int8 HELLO=29\n\
int8 COME=30\n\
int8 SIT_DOWN=31\n\
int8 STAND_UP=32\n\
int8 BYE=33\n\
int8 PUSH_YOUR_RIGHT=34\n\
int8 PUSH_YOUR_LEFT=35\n\
int8 TAKE_GET=36\n\
\n\
Header header\n\
int8 behavior\n\
int8 arg\n\
string entity\n\
bool is_preemptive\n\
bool is_interactive\n\
float32 prob #probability of this behavior to result in a specific effect, this is set by \"learning\"\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: al_msgs/Effect\n\
int8 MAX_EFFECT_INDEX = 29\n\
\n\
int8 NO_CHANGE=0\n\
int8 REACHED=1\n\
int8 MOVED_RIGHT=2\n\
int8 MOVED_LEFT=3\n\
int8 MOVED_FORWARD=4\n\
int8 MOVED_BACKWARD=5\n\
int8 DISAPPEARED=6\n\
int8 VANISHED=7\n\
int8 ROTATED_CW=8\n\
int8 ROTATED_CCW=9\n\
int8 TOPPLED_RGT=10\n\
int8 TOPPLED_LFT=11\n\
int8 TOPPLED_FWD=12\n\
int8 TOPPLED_BWD=13\n\
int8 ROLLED_RIGHT=14\n\
int8 ROLLED_LEFT=15\n\
int8 ROLLED_FORWARD=16\n\
int8 ROLLED_BACKWARD=17\n\
int8 GRASPED=18\n\
int8 ACQUIRED=19\n\
int8 RELEASED=20\n\
int8 TAKEN=21\n\
int8 GIVEN=22\n\
int8 GOT_ATTENTION=23\n\
int8 TOPPLED=24\n\
int8 GOT_SEATED=25\n\
int8 GOT_CLOSER=26\n\
int8 GOT_FURTHER=27\n\
int8 STOOD_UP=28\n\
int8 WENT_AWAY=29\n\
\n\
#later arg can be made vector if multiple effect\n\
#instances to be captured in one action application\n\
int8 effect\n\
int8 arg\n\
float32 prob #probability of this effect to occur, this is set by \"learning\"\n\
\n\
================================================================================\n\
MSG: al_msgs/Spec\n\
int8 MAX_SPEC_INDEX=7\n\
\n\
int8 THIN=0\n\
int8 THICK=1\n\
int8 ROUND=2\n\
int8 EDGY=3\n\
int8 TALL=4\n\
int8 SHORT=5\n\
int8 BIG=6\n\
int8 SMALL=7\n\
int8 spec\n\
float32 prob\n\
\n\
";
  }

  static const char* value(const  ::al_msgs::Speech_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_msgs::Speech_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.behavior);
    stream.next(m.effect);
    stream.next(m.adjective);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Speech_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_msgs::Speech_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_msgs::Speech_<ContainerAllocator> & v) 
  {
    s << indent << "behavior: ";
s << std::endl;
    Printer< ::al_msgs::Behavior_<ContainerAllocator> >::stream(s, indent + "  ", v.behavior);
    s << indent << "effect: ";
s << std::endl;
    Printer< ::al_msgs::Effect_<ContainerAllocator> >::stream(s, indent + "  ", v.effect);
    s << indent << "adjective: ";
s << std::endl;
    Printer< ::al_msgs::Spec_<ContainerAllocator> >::stream(s, indent + "  ", v.adjective);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_MSGS_MESSAGE_SPEECH_H


"""autogenerated by genpy from al_behavior/ArmFeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import al_msgs.msg

class ArmFeedback(genpy.Message):
  _md5sum = "711bb2786f95618dccc9060d209afdec"
  _type = "al_behavior/ArmFeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
bool feed_mode
al_msgs/JointCmd[] feed_joint_pos
geometry_msgs/Pose feed_cartesian_pos


================================================================================
MSG: al_msgs/JointCmd
uint8 joint_id
float64 joint_val

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['feed_mode','feed_joint_pos','feed_cartesian_pos']
  _slot_types = ['bool','al_msgs/JointCmd[]','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       feed_mode,feed_joint_pos,feed_cartesian_pos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArmFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.feed_mode is None:
        self.feed_mode = False
      if self.feed_joint_pos is None:
        self.feed_joint_pos = []
      if self.feed_cartesian_pos is None:
        self.feed_cartesian_pos = geometry_msgs.msg.Pose()
    else:
      self.feed_mode = False
      self.feed_joint_pos = []
      self.feed_cartesian_pos = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.feed_mode))
      length = len(self.feed_joint_pos)
      buff.write(_struct_I.pack(length))
      for val1 in self.feed_joint_pos:
        _x = val1
        buff.write(_struct_Bd.pack(_x.joint_id, _x.joint_val))
      _x = self
      buff.write(_struct_7d.pack(_x.feed_cartesian_pos.position.x, _x.feed_cartesian_pos.position.y, _x.feed_cartesian_pos.position.z, _x.feed_cartesian_pos.orientation.x, _x.feed_cartesian_pos.orientation.y, _x.feed_cartesian_pos.orientation.z, _x.feed_cartesian_pos.orientation.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.feed_joint_pos is None:
        self.feed_joint_pos = None
      if self.feed_cartesian_pos is None:
        self.feed_cartesian_pos = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 1
      (self.feed_mode,) = _struct_B.unpack(str[start:end])
      self.feed_mode = bool(self.feed_mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feed_joint_pos = []
      for i in range(0, length):
        val1 = al_msgs.msg.JointCmd()
        _x = val1
        start = end
        end += 9
        (_x.joint_id, _x.joint_val,) = _struct_Bd.unpack(str[start:end])
        self.feed_joint_pos.append(val1)
      _x = self
      start = end
      end += 56
      (_x.feed_cartesian_pos.position.x, _x.feed_cartesian_pos.position.y, _x.feed_cartesian_pos.position.z, _x.feed_cartesian_pos.orientation.x, _x.feed_cartesian_pos.orientation.y, _x.feed_cartesian_pos.orientation.z, _x.feed_cartesian_pos.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.feed_mode))
      length = len(self.feed_joint_pos)
      buff.write(_struct_I.pack(length))
      for val1 in self.feed_joint_pos:
        _x = val1
        buff.write(_struct_Bd.pack(_x.joint_id, _x.joint_val))
      _x = self
      buff.write(_struct_7d.pack(_x.feed_cartesian_pos.position.x, _x.feed_cartesian_pos.position.y, _x.feed_cartesian_pos.position.z, _x.feed_cartesian_pos.orientation.x, _x.feed_cartesian_pos.orientation.y, _x.feed_cartesian_pos.orientation.z, _x.feed_cartesian_pos.orientation.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.feed_joint_pos is None:
        self.feed_joint_pos = None
      if self.feed_cartesian_pos is None:
        self.feed_cartesian_pos = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 1
      (self.feed_mode,) = _struct_B.unpack(str[start:end])
      self.feed_mode = bool(self.feed_mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feed_joint_pos = []
      for i in range(0, length):
        val1 = al_msgs.msg.JointCmd()
        _x = val1
        start = end
        end += 9
        (_x.joint_id, _x.joint_val,) = _struct_Bd.unpack(str[start:end])
        self.feed_joint_pos.append(val1)
      _x = self
      start = end
      end += 56
      (_x.feed_cartesian_pos.position.x, _x.feed_cartesian_pos.position.y, _x.feed_cartesian_pos.position.z, _x.feed_cartesian_pos.orientation.x, _x.feed_cartesian_pos.orientation.y, _x.feed_cartesian_pos.orientation.z, _x.feed_cartesian_pos.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Bd = struct.Struct("<Bd")
_struct_B = struct.Struct("<B")
_struct_7d = struct.Struct("<7d")

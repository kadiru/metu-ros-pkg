/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_srvs/srv/GetLearnedBehavior.srv */
#ifndef AL_SRVS_SERVICE_GETLEARNEDBEHAVIOR_H
#define AL_SRVS_SERVICE_GETLEARNEDBEHAVIOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "al_msgs/FeatureVector.h"



namespace al_srvs
{
template <class ContainerAllocator>
struct GetLearnedBehaviorRequest_ {
  typedef GetLearnedBehaviorRequest_<ContainerAllocator> Type;

  GetLearnedBehaviorRequest_()
  : feature_vector()
  , effect_id(0)
  {
  }

  GetLearnedBehaviorRequest_(const ContainerAllocator& _alloc)
  : feature_vector(_alloc)
  , effect_id(0)
  {
  }

  typedef  ::al_msgs::FeatureVector_<ContainerAllocator>  _feature_vector_type;
   ::al_msgs::FeatureVector_<ContainerAllocator>  feature_vector;

  typedef int8_t _effect_id_type;
  int8_t effect_id;


  typedef boost::shared_ptr< ::al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetLearnedBehaviorRequest
typedef  ::al_srvs::GetLearnedBehaviorRequest_<std::allocator<void> > GetLearnedBehaviorRequest;

typedef boost::shared_ptr< ::al_srvs::GetLearnedBehaviorRequest> GetLearnedBehaviorRequestPtr;
typedef boost::shared_ptr< ::al_srvs::GetLearnedBehaviorRequest const> GetLearnedBehaviorRequestConstPtr;


template <class ContainerAllocator>
struct GetLearnedBehaviorResponse_ {
  typedef GetLearnedBehaviorResponse_<ContainerAllocator> Type;

  GetLearnedBehaviorResponse_()
  : behavior_id(0)
  {
  }

  GetLearnedBehaviorResponse_(const ContainerAllocator& _alloc)
  : behavior_id(0)
  {
  }

  typedef int8_t _behavior_id_type;
  int8_t behavior_id;


  typedef boost::shared_ptr< ::al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetLearnedBehaviorResponse
typedef  ::al_srvs::GetLearnedBehaviorResponse_<std::allocator<void> > GetLearnedBehaviorResponse;

typedef boost::shared_ptr< ::al_srvs::GetLearnedBehaviorResponse> GetLearnedBehaviorResponsePtr;
typedef boost::shared_ptr< ::al_srvs::GetLearnedBehaviorResponse const> GetLearnedBehaviorResponseConstPtr;

struct GetLearnedBehavior
{

typedef GetLearnedBehaviorRequest Request;
typedef GetLearnedBehaviorResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetLearnedBehavior
} // namespace al_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fca08d53898ab478cb8cb76d2347e1f1";
  }

  static const char* value(const  ::al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfca08d53898ab478ULL;
  static const uint64_t static_value2 = 0xcb8cb76d2347e1f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_srvs/GetLearnedBehaviorRequest";
  }

  static const char* value(const  ::al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/FeatureVector feature_vector\n\
int8 effect_id\n\
\n\
================================================================================\n\
MSG: al_msgs/FeatureVector\n\
al_msgs/Feature[] features\n\
\n\
================================================================================\n\
MSG: al_msgs/Feature\n\
float32 min # min value\n\
float32 max # max value\n\
float32 avg # average value\n\
float32 var # variance\n\
float32 dev # standard deviation\n\
float32[] his # histogram\n\
std_msgs/Time stamp # time stamp when this feature is calculated\n\
float32 range_min # min value that this feature can get\n\
float32 range_max # max value that this feature can get\n\
int16 n_hist_bins # number of bins in its histogram\n\
string NORMAL_AZI=NormalAzimuth\n\
string NORMAL_ZEN=NormalZenith\n\
string CURV_MIN=MinCurvature\n\
string CURV_MAX=MaxCurvature\n\
string CURV_MEAN=MeanCurvature\n\
string CURV_GAUSS=GaussCurvature\n\
string SHAPE_INDEX=ShapeIndex\n\
string R_COLOR=RedColor\n\
string G_COLOR=GreenColor\n\
string B_COLOR=BlueColor\n\
string POS_X=PositionX\n\
string POS_Y=PositionY\n\
string POS_Z=PositionZ\n\
string ROT_T=RotationTheta\n\
string DIM_X=DimensionX\n\
string DIM_Y=DimensionY\n\
string DIM_Z=DimensionZ\n\
string OBJECT_PRESENCE=ObjectPresence\n\
string HUMAN_TORSO_X=HumanTorsoX\n\
string HUMAN_TORSO_Y=HumanTorsoY\n\
string HUMAN_TORSO_Z=HumanTorsoZ\n\
string HUMAN_TORSO_ROLL=HumanTorsoRoll\n\
string HUMAN_TORSO_PITCH=HumanTorsoPitch\n\
string HUMAN_TORSO_YAW=HumanTorsoYaw\n\
string HUMAN_HEAD_ROLL=HumanHeadRoll\n\
string HUMAN_HEAD_PITCH=HumanHeadPitch\n\
string HUMAN_HEAD_YAW=HumanHeadYaw\n\
string HUMAN_PRESENCE=HumanPresence\n\
string AFFORDANCE_ACC=AffordanceAccuracy\n\
string type\n\
string DISPERSIVE_VALUED=DispersiveValued\n\
string SINGLE_VALUED=SingleValued\n\
string val_type\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Time\n\
time data\n\
\n\
";
  }

  static const char* value(const  ::al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f2251402e18e24532c1c2415eba9fc69";
  }

  static const char* value(const  ::al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf2251402e18e2453ULL;
  static const uint64_t static_value2 = 0x2c1c2415eba9fc69ULL;
};

template<class ContainerAllocator>
struct DataType< ::al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_srvs/GetLearnedBehaviorResponse";
  }

  static const char* value(const  ::al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 behavior_id\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.feature_vector);
    stream.next(m.effect_id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetLearnedBehaviorRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.behavior_id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetLearnedBehaviorResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<al_srvs::GetLearnedBehavior> {
  static const char* value() 
  {
    return "fcf4afdd6b1a98d45b3dafa97a4d7953";
  }

  static const char* value(const al_srvs::GetLearnedBehavior&) { return value(); } 
};

template<>
struct DataType<al_srvs::GetLearnedBehavior> {
  static const char* value() 
  {
    return "al_srvs/GetLearnedBehavior";
  }

  static const char* value(const al_srvs::GetLearnedBehavior&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fcf4afdd6b1a98d45b3dafa97a4d7953";
  }

  static const char* value(const al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_srvs/GetLearnedBehavior";
  }

  static const char* value(const al_srvs::GetLearnedBehaviorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fcf4afdd6b1a98d45b3dafa97a4d7953";
  }

  static const char* value(const al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_srvs/GetLearnedBehavior";
  }

  static const char* value(const al_srvs::GetLearnedBehaviorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // AL_SRVS_SERVICE_GETLEARNEDBEHAVIOR_H


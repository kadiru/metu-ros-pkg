"""autogenerated by genpy from al_msgs/Behavior.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Behavior(genpy.Message):
  _md5sum = "ccdffe7925ef3686ec5909efa3835884"
  _type = "al_msgs/Behavior"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """int8 MAX_BEHAVIOR_INDEX = 36

int8 TUCK_ARMS = 0
int8 REACH = 1
int8 COVER = 2
int8 CALL = 3
int8 TAKE = 4
int8 GIVE = 5
int8 GRASP_TOP = 6
int8 GRASP_SIDE = 7
int8 PUSH_RGT = 8
int8 PUSH_LFT = 9
int8 PUSH_FWD = 10
int8 PUSH_BWD = 11
int8 PUSH_TOP_RGT = 12
int8 PUSH_TOP_LFT = 13
int8 PUSH_TOP_FWD = 14
int8 PUSH_TOP_BWD = 15
int8 POINT=16
int8 HIDE=17
int8 CANCEL=18
int8 STOP=19
int8 SHOW=20
int8 HOME=21
int8 LOOK_AT_REGION=22
int8 LOOK_AT_POINT=23
int8 LOOK_AT_FACE=24
int8 LIFT=25
int8 RELEASE=26
int8 CONTINUE=27
int8 SAY_PASS_ME=28
int8 HELLO=29
int8 COME=30
int8 SIT_DOWN=31
int8 STAND_UP=32
int8 BYE=33
int8 PUSH_YOUR_RIGHT=34
int8 PUSH_YOUR_LEFT=35
int8 TAKE_GET=36

Header header
int8 behavior
int8 arg
string entity
bool is_preemptive
bool is_interactive
float32 prob #probability of this behavior to result in a specific effect, this is set by "learning"

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  # Pseudo-constants
  MAX_BEHAVIOR_INDEX = 36
  TUCK_ARMS = 0
  REACH = 1
  COVER = 2
  CALL = 3
  TAKE = 4
  GIVE = 5
  GRASP_TOP = 6
  GRASP_SIDE = 7
  PUSH_RGT = 8
  PUSH_LFT = 9
  PUSH_FWD = 10
  PUSH_BWD = 11
  PUSH_TOP_RGT = 12
  PUSH_TOP_LFT = 13
  PUSH_TOP_FWD = 14
  PUSH_TOP_BWD = 15
  POINT = 16
  HIDE = 17
  CANCEL = 18
  STOP = 19
  SHOW = 20
  HOME = 21
  LOOK_AT_REGION = 22
  LOOK_AT_POINT = 23
  LOOK_AT_FACE = 24
  LIFT = 25
  RELEASE = 26
  CONTINUE = 27
  SAY_PASS_ME = 28
  HELLO = 29
  COME = 30
  SIT_DOWN = 31
  STAND_UP = 32
  BYE = 33
  PUSH_YOUR_RIGHT = 34
  PUSH_YOUR_LEFT = 35
  TAKE_GET = 36

  __slots__ = ['header','behavior','arg','entity','is_preemptive','is_interactive','prob']
  _slot_types = ['std_msgs/Header','int8','int8','string','bool','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,behavior,arg,entity,is_preemptive,is_interactive,prob

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Behavior, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.behavior is None:
        self.behavior = 0
      if self.arg is None:
        self.arg = 0
      if self.entity is None:
        self.entity = ''
      if self.is_preemptive is None:
        self.is_preemptive = False
      if self.is_interactive is None:
        self.is_interactive = False
      if self.prob is None:
        self.prob = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.behavior = 0
      self.arg = 0
      self.entity = ''
      self.is_preemptive = False
      self.is_interactive = False
      self.prob = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2b.pack(_x.behavior, _x.arg))
      _x = self.entity
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2Bf.pack(_x.is_preemptive, _x.is_interactive, _x.prob))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.behavior, _x.arg,) = _struct_2b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.entity = str[start:end].decode('utf-8')
      else:
        self.entity = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.is_preemptive, _x.is_interactive, _x.prob,) = _struct_2Bf.unpack(str[start:end])
      self.is_preemptive = bool(self.is_preemptive)
      self.is_interactive = bool(self.is_interactive)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2b.pack(_x.behavior, _x.arg))
      _x = self.entity
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2Bf.pack(_x.is_preemptive, _x.is_interactive, _x.prob))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.behavior, _x.arg,) = _struct_2b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.entity = str[start:end].decode('utf-8')
      else:
        self.entity = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.is_preemptive, _x.is_interactive, _x.prob,) = _struct_2Bf.unpack(str[start:end])
      self.is_preemptive = bool(self.is_preemptive)
      self.is_interactive = bool(self.is_interactive)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2Bf = struct.Struct("<2Bf")
_struct_3I = struct.Struct("<3I")
_struct_2b = struct.Struct("<2b")

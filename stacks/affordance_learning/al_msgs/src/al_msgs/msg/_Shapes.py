"""autogenerated by genpy from al_msgs/Shapes.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import al_msgs.msg

class Shapes(genpy.Message):
  _md5sum = "96f8e930a1e7cc363a4dedc602d6617a"
  _type = "al_msgs/Shapes"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """al_msgs/Shape[] shapes

================================================================================
MSG: al_msgs/Shape
int8 MAX_SHAPE_INDEX=6
int8 CUP=0
int8 BOX=1
int8 CYLINDER=2
int8 BALL=3
int8 SPHERE=4
int8 CUBE=5
int8 OTHER=6
int8 shape
float32 prob

"""
  __slots__ = ['shapes']
  _slot_types = ['al_msgs/Shape[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       shapes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Shapes, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.shapes is None:
        self.shapes = []
    else:
      self.shapes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.shapes)
      buff.write(_struct_I.pack(length))
      for val1 in self.shapes:
        _x = val1
        buff.write(_struct_bf.pack(_x.shape, _x.prob))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.shapes is None:
        self.shapes = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shapes = []
      for i in range(0, length):
        val1 = al_msgs.msg.Shape()
        _x = val1
        start = end
        end += 5
        (_x.shape, _x.prob,) = _struct_bf.unpack(str[start:end])
        self.shapes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.shapes)
      buff.write(_struct_I.pack(length))
      for val1 in self.shapes:
        _x = val1
        buff.write(_struct_bf.pack(_x.shape, _x.prob))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.shapes is None:
        self.shapes = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shapes = []
      for i in range(0, length):
        val1 = al_msgs.msg.Shape()
        _x = val1
        start = end
        end += 5
        (_x.shape, _x.prob,) = _struct_bf.unpack(str[start:end])
        self.shapes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_bf = struct.Struct("<bf")

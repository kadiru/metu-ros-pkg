"""autogenerated by genpy from al_msgs/SceneObjects.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arm_navigation_msgs.msg
import geometry_msgs.msg
import al_msgs.msg
import std_msgs.msg

class SceneObjects(genpy.Message):
  _md5sum = "196866b38fd1072cc3bf0ecb6599c17e"
  _type = "al_msgs/SceneObjects"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """al_msgs/Object[] objects

================================================================================
MSG: al_msgs/Object
string name
string model_xml
al_msgs/Color color
al_msgs/Shape[] shapes
al_msgs/Spec spec
arm_navigation_msgs/CollisionObject object

================================================================================
MSG: al_msgs/Color
int8 MAX_COLOR_INDEX=4

int8 BLACK=0
int8 RED=1
int8 GREEN=2
int8 BLUE=3
int8 WHITE=4
int8 color

================================================================================
MSG: al_msgs/Shape
int8 MAX_SHAPE_INDEX=6
int8 CUP=0
int8 BOX=1
int8 CYLINDER=2
int8 BALL=3
int8 SPHERE=4
int8 CUBE=5
int8 OTHER=6
int8 shape
float32 prob

================================================================================
MSG: al_msgs/Spec
int8 MAX_SPEC_INDEX=7

int8 THIN=0
int8 THICK=1
int8 ROUND=2
int8 EDGY=3
int8 TALL=4
int8 SHORT=5
int8 BIG=6
int8 SMALL=7
int8 spec
float32 prob

================================================================================
MSG: arm_navigation_msgs/CollisionObject
# a header, used for interpreting the poses
Header header

# the id of the object
string id

# The padding used for filtering points near the object.
# This does not affect collision checking for the object.  
# Set to negative to get zero padding.
float32 padding

#This contains what is to be done with the object
CollisionObjectOperation operation

#the shapes associated with the object
arm_navigation_msgs/Shape[] shapes

#the poses associated with the shapes - will be transformed using the header
geometry_msgs/Pose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: arm_navigation_msgs/CollisionObjectOperation
#Puts the object into the environment
#or updates the object if already added
byte ADD=0

#Removes the object from the environment entirely
byte REMOVE=1

#Only valid within the context of a CollisionAttachedObject message
#Will be ignored if sent with an CollisionObject message
#Takes an attached object, detaches from the attached link
#But adds back in as regular object
byte DETACH_AND_ADD_AS_OBJECT=2

#Only valid within the context of a CollisionAttachedObject message
#Will be ignored if sent with an CollisionObject message
#Takes current object in the environment and removes it as
#a regular object
byte ATTACH_AND_REMOVE_AS_OBJECT=3

# Byte code for operation
byte operation

================================================================================
MSG: arm_navigation_msgs/Shape
byte SPHERE=0
byte BOX=1
byte CYLINDER=2
byte MESH=3

byte type


#### define sphere, box, cylinder ####
# the origin of each shape is considered at the shape's center

# for sphere
# radius := dimensions[0]

# for cylinder
# radius := dimensions[0]
# length := dimensions[1]
# the length is along the Z axis

# for box
# size_x := dimensions[0]
# size_y := dimensions[1]
# size_z := dimensions[2]
float64[] dimensions


#### define mesh ####

# list of triangles; triangle k is defined by tre vertices located
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]
int32[] triangles
geometry_msgs/Point[] vertices

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['objects']
  _slot_types = ['al_msgs/Object[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SceneObjects, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.objects is None:
        self.objects = []
    else:
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.model_xml
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.color
        buff.write(_struct_b.pack(_v1.color))
        length = len(val1.shapes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.shapes:
          _x = val2
          buff.write(_struct_bf.pack(_x.shape, _x.prob))
        _v2 = val1.spec
        _x = _v2
        buff.write(_struct_bf.pack(_x.spec, _x.prob))
        _v3 = val1.object
        _v4 = _v3.header
        buff.write(_struct_I.pack(_v4.seq))
        _v5 = _v4.stamp
        _x = _v5
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v4.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v3.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_f.pack(_v3.padding))
        _v6 = _v3.operation
        buff.write(_struct_b.pack(_v6.operation))
        length = len(_v3.shapes)
        buff.write(_struct_I.pack(length))
        for val3 in _v3.shapes:
          buff.write(_struct_b.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(struct.pack(pattern, *val3.triangles))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v3.poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v3.poses:
          _v7 = val3.position
          _x = _v7
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v8 = val3.orientation
          _x = _v8
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.objects is None:
        self.objects = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = al_msgs.msg.Object()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.model_xml = str[start:end].decode('utf-8')
        else:
          val1.model_xml = str[start:end]
        _v9 = val1.color
        start = end
        end += 1
        (_v9.color,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.shapes = []
        for i in range(0, length):
          val2 = al_msgs.msg.Shape()
          _x = val2
          start = end
          end += 5
          (_x.shape, _x.prob,) = _struct_bf.unpack(str[start:end])
          val1.shapes.append(val2)
        _v10 = val1.spec
        _x = _v10
        start = end
        end += 5
        (_x.spec, _x.prob,) = _struct_bf.unpack(str[start:end])
        _v11 = val1.object
        _v12 = _v11.header
        start = end
        end += 4
        (_v12.seq,) = _struct_I.unpack(str[start:end])
        _v13 = _v12.stamp
        _x = _v13
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v12.frame_id = str[start:end].decode('utf-8')
        else:
          _v12.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v11.id = str[start:end].decode('utf-8')
        else:
          _v11.id = str[start:end]
        start = end
        end += 4
        (_v11.padding,) = _struct_f.unpack(str[start:end])
        _v14 = _v11.operation
        start = end
        end += 1
        (_v14.operation,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v11.shapes = []
        for i in range(0, length):
          val3 = arm_navigation_msgs.msg.Shape()
          start = end
          end += 1
          (val3.type,) = _struct_b.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val3.triangles = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v11.shapes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v11.poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v15 = val3.position
          _x = _v15
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v16 = val3.orientation
          _x = _v16
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v11.poses.append(val3)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.model_xml
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v17 = val1.color
        buff.write(_struct_b.pack(_v17.color))
        length = len(val1.shapes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.shapes:
          _x = val2
          buff.write(_struct_bf.pack(_x.shape, _x.prob))
        _v18 = val1.spec
        _x = _v18
        buff.write(_struct_bf.pack(_x.spec, _x.prob))
        _v19 = val1.object
        _v20 = _v19.header
        buff.write(_struct_I.pack(_v20.seq))
        _v21 = _v20.stamp
        _x = _v21
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v20.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v19.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_f.pack(_v19.padding))
        _v22 = _v19.operation
        buff.write(_struct_b.pack(_v22.operation))
        length = len(_v19.shapes)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.shapes:
          buff.write(_struct_b.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(val3.triangles.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v19.poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.poses:
          _v23 = val3.position
          _x = _v23
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v24 = val3.orientation
          _x = _v24
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.objects is None:
        self.objects = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = al_msgs.msg.Object()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.model_xml = str[start:end].decode('utf-8')
        else:
          val1.model_xml = str[start:end]
        _v25 = val1.color
        start = end
        end += 1
        (_v25.color,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.shapes = []
        for i in range(0, length):
          val2 = al_msgs.msg.Shape()
          _x = val2
          start = end
          end += 5
          (_x.shape, _x.prob,) = _struct_bf.unpack(str[start:end])
          val1.shapes.append(val2)
        _v26 = val1.spec
        _x = _v26
        start = end
        end += 5
        (_x.spec, _x.prob,) = _struct_bf.unpack(str[start:end])
        _v27 = val1.object
        _v28 = _v27.header
        start = end
        end += 4
        (_v28.seq,) = _struct_I.unpack(str[start:end])
        _v29 = _v28.stamp
        _x = _v29
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.frame_id = str[start:end].decode('utf-8')
        else:
          _v28.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v27.id = str[start:end].decode('utf-8')
        else:
          _v27.id = str[start:end]
        start = end
        end += 4
        (_v27.padding,) = _struct_f.unpack(str[start:end])
        _v30 = _v27.operation
        start = end
        end += 1
        (_v30.operation,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v27.shapes = []
        for i in range(0, length):
          val3 = arm_navigation_msgs.msg.Shape()
          start = end
          end += 1
          (val3.type,) = _struct_b.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val3.triangles = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v27.shapes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v27.poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v31 = val3.position
          _x = _v31
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v32 = val3.orientation
          _x = _v32
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v27.poses.append(val3)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_bf = struct.Struct("<bf")
_struct_b = struct.Struct("<b")
_struct_f = struct.Struct("<f")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")

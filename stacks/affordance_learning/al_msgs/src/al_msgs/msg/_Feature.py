"""autogenerated by genpy from al_msgs/Feature.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class Feature(genpy.Message):
  _md5sum = "547e53b14bcf375d87584ca0fa21313a"
  _type = "al_msgs/Feature"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 min # min value
float32 max # max value
float32 avg # average value
float32 var # variance
float32 dev # standard deviation
float32[] his # histogram
std_msgs/Time stamp # time stamp when this feature is calculated
float32 range_min # min value that this feature can get
float32 range_max # max value that this feature can get
int16 n_hist_bins # number of bins in its histogram
string NORMAL_AZI=NormalAzimuth
string NORMAL_ZEN=NormalZenith
string CURV_MIN=MinCurvature
string CURV_MAX=MaxCurvature
string CURV_MEAN=MeanCurvature
string CURV_GAUSS=GaussCurvature
string SHAPE_INDEX=ShapeIndex
string R_COLOR=RedColor
string G_COLOR=GreenColor
string B_COLOR=BlueColor
string POS_X=PositionX
string POS_Y=PositionY
string POS_Z=PositionZ
string ROT_T=RotationTheta
string DIM_X=DimensionX
string DIM_Y=DimensionY
string DIM_Z=DimensionZ
string OBJECT_PRESENCE=ObjectPresence
string HUMAN_TORSO_X=HumanTorsoX
string HUMAN_TORSO_Y=HumanTorsoY
string HUMAN_TORSO_Z=HumanTorsoZ
string HUMAN_TORSO_ROLL=HumanTorsoRoll
string HUMAN_TORSO_PITCH=HumanTorsoPitch
string HUMAN_TORSO_YAW=HumanTorsoYaw
string HUMAN_HEAD_ROLL=HumanHeadRoll
string HUMAN_HEAD_PITCH=HumanHeadPitch
string HUMAN_HEAD_YAW=HumanHeadYaw
string HUMAN_PRESENCE=HumanPresence
string AFFORDANCE_ACC=AffordanceAccuracy
string type
string DISPERSIVE_VALUED=DispersiveValued
string SINGLE_VALUED=SingleValued
string val_type


================================================================================
MSG: std_msgs/Time
time data

"""
  # Pseudo-constants
  NORMAL_AZI = 'NormalAzimuth'
  NORMAL_ZEN = 'NormalZenith'
  CURV_MIN = 'MinCurvature'
  CURV_MAX = 'MaxCurvature'
  CURV_MEAN = 'MeanCurvature'
  CURV_GAUSS = 'GaussCurvature'
  SHAPE_INDEX = 'ShapeIndex'
  R_COLOR = 'RedColor'
  G_COLOR = 'GreenColor'
  B_COLOR = 'BlueColor'
  POS_X = 'PositionX'
  POS_Y = 'PositionY'
  POS_Z = 'PositionZ'
  ROT_T = 'RotationTheta'
  DIM_X = 'DimensionX'
  DIM_Y = 'DimensionY'
  DIM_Z = 'DimensionZ'
  OBJECT_PRESENCE = 'ObjectPresence'
  HUMAN_TORSO_X = 'HumanTorsoX'
  HUMAN_TORSO_Y = 'HumanTorsoY'
  HUMAN_TORSO_Z = 'HumanTorsoZ'
  HUMAN_TORSO_ROLL = 'HumanTorsoRoll'
  HUMAN_TORSO_PITCH = 'HumanTorsoPitch'
  HUMAN_TORSO_YAW = 'HumanTorsoYaw'
  HUMAN_HEAD_ROLL = 'HumanHeadRoll'
  HUMAN_HEAD_PITCH = 'HumanHeadPitch'
  HUMAN_HEAD_YAW = 'HumanHeadYaw'
  HUMAN_PRESENCE = 'HumanPresence'
  AFFORDANCE_ACC = 'AffordanceAccuracy'
  DISPERSIVE_VALUED = 'DispersiveValued'
  SINGLE_VALUED = 'SingleValued'

  __slots__ = ['min','max','avg','var','dev','his','stamp','range_min','range_max','n_hist_bins','type','val_type']
  _slot_types = ['float32','float32','float32','float32','float32','float32[]','std_msgs/Time','float32','float32','int16','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       min,max,avg,var,dev,his,stamp,range_min,range_max,n_hist_bins,type,val_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Feature, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.min is None:
        self.min = 0.
      if self.max is None:
        self.max = 0.
      if self.avg is None:
        self.avg = 0.
      if self.var is None:
        self.var = 0.
      if self.dev is None:
        self.dev = 0.
      if self.his is None:
        self.his = []
      if self.stamp is None:
        self.stamp = std_msgs.msg.Time()
      if self.range_min is None:
        self.range_min = 0.
      if self.range_max is None:
        self.range_max = 0.
      if self.n_hist_bins is None:
        self.n_hist_bins = 0
      if self.type is None:
        self.type = ''
      if self.val_type is None:
        self.val_type = ''
    else:
      self.min = 0.
      self.max = 0.
      self.avg = 0.
      self.var = 0.
      self.dev = 0.
      self.his = []
      self.stamp = std_msgs.msg.Time()
      self.range_min = 0.
      self.range_max = 0.
      self.n_hist_bins = 0
      self.type = ''
      self.val_type = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5f.pack(_x.min, _x.max, _x.avg, _x.var, _x.dev))
      length = len(self.his)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.his))
      _x = self
      buff.write(_struct_2I2fh.pack(_x.stamp.data.secs, _x.stamp.data.nsecs, _x.range_min, _x.range_max, _x.n_hist_bins))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.val_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = std_msgs.msg.Time()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.min, _x.max, _x.avg, _x.var, _x.dev,) = _struct_5f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.his = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 18
      (_x.stamp.data.secs, _x.stamp.data.nsecs, _x.range_min, _x.range_max, _x.n_hist_bins,) = _struct_2I2fh.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.val_type = str[start:end].decode('utf-8')
      else:
        self.val_type = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5f.pack(_x.min, _x.max, _x.avg, _x.var, _x.dev))
      length = len(self.his)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.his.tostring())
      _x = self
      buff.write(_struct_2I2fh.pack(_x.stamp.data.secs, _x.stamp.data.nsecs, _x.range_min, _x.range_max, _x.n_hist_bins))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.val_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = std_msgs.msg.Time()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.min, _x.max, _x.avg, _x.var, _x.dev,) = _struct_5f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.his = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 18
      (_x.stamp.data.secs, _x.stamp.data.nsecs, _x.range_min, _x.range_max, _x.n_hist_bins,) = _struct_2I2fh.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.val_type = str[start:end].decode('utf-8')
      else:
        self.val_type = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5f = struct.Struct("<5f")
_struct_2I2fh = struct.Struct("<2I2fh")

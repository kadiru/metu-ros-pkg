"""autogenerated by genpy from al_srvs/PerceptionAllRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PerceptionAllRequest(genpy.Message):
  _md5sum = "cfae433ef22bd8313f92bc5cad00c264"
  _type = "al_srvs/PerceptionAllRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 task

"""
  __slots__ = ['task']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PerceptionAllRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.task is None:
        self.task = 0
    else:
      self.task = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.task))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.task,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.task))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.task,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
"""autogenerated by genpy from al_srvs/PerceptionAllResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg
import al_msgs.msg
import sensor_msgs.msg

class PerceptionAllResponse(genpy.Message):
  _md5sum = "d6024c615b734c3eb28a7393ff152be0"
  _type = "al_srvs/PerceptionAllResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
uint8 DONE = 1
sensor_msgs/PointCloud2 pushable_object_centers
sensor_msgs/PointCloud2 pushable_object_sizes
sensor_msgs/PointCloud2 pushable_object_ids
al_msgs/FeatureVectorVector pushable_object_features



================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: al_msgs/FeatureVectorVector
al_msgs/FeatureVector[] features

================================================================================
MSG: al_msgs/FeatureVector
al_msgs/Feature[] features

================================================================================
MSG: al_msgs/Feature
float32 min # min value
float32 max # max value
float32 avg # average value
float32 var # variance
float32 dev # standard deviation
float32[] his # histogram
std_msgs/Time stamp # time stamp when this feature is calculated
float32 range_min # min value that this feature can get
float32 range_max # max value that this feature can get
int16 n_hist_bins # number of bins in its histogram
string NORMAL_AZI=NormalAzimuth
string NORMAL_ZEN=NormalZenith
string CURV_MIN=MinCurvature
string CURV_MAX=MaxCurvature
string CURV_MEAN=MeanCurvature
string CURV_GAUSS=GaussCurvature
string SHAPE_INDEX=ShapeIndex
string R_COLOR=RedColor
string G_COLOR=GreenColor
string B_COLOR=BlueColor
string POS_X=PositionX
string POS_Y=PositionY
string POS_Z=PositionZ
string ROT_T=RotationTheta
string DIM_X=DimensionX
string DIM_Y=DimensionY
string DIM_Z=DimensionZ
string OBJECT_PRESENCE=ObjectPresence
string HUMAN_TORSO_X=HumanTorsoX
string HUMAN_TORSO_Y=HumanTorsoY
string HUMAN_TORSO_Z=HumanTorsoZ
string HUMAN_TORSO_ROLL=HumanTorsoRoll
string HUMAN_TORSO_PITCH=HumanTorsoPitch
string HUMAN_TORSO_YAW=HumanTorsoYaw
string HUMAN_HEAD_ROLL=HumanHeadRoll
string HUMAN_HEAD_PITCH=HumanHeadPitch
string HUMAN_HEAD_YAW=HumanHeadYaw
string HUMAN_PRESENCE=HumanPresence
string AFFORDANCE_ACC=AffordanceAccuracy
string type
string DISPERSIVE_VALUED=DispersiveValued
string SINGLE_VALUED=SingleValued
string val_type


================================================================================
MSG: std_msgs/Time
time data

"""
  # Pseudo-constants
  DONE = 1

  __slots__ = ['pushable_object_centers','pushable_object_sizes','pushable_object_ids','pushable_object_features']
  _slot_types = ['sensor_msgs/PointCloud2','sensor_msgs/PointCloud2','sensor_msgs/PointCloud2','al_msgs/FeatureVectorVector']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pushable_object_centers,pushable_object_sizes,pushable_object_ids,pushable_object_features

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PerceptionAllResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pushable_object_centers is None:
        self.pushable_object_centers = sensor_msgs.msg.PointCloud2()
      if self.pushable_object_sizes is None:
        self.pushable_object_sizes = sensor_msgs.msg.PointCloud2()
      if self.pushable_object_ids is None:
        self.pushable_object_ids = sensor_msgs.msg.PointCloud2()
      if self.pushable_object_features is None:
        self.pushable_object_features = al_msgs.msg.FeatureVectorVector()
    else:
      self.pushable_object_centers = sensor_msgs.msg.PointCloud2()
      self.pushable_object_sizes = sensor_msgs.msg.PointCloud2()
      self.pushable_object_ids = sensor_msgs.msg.PointCloud2()
      self.pushable_object_features = al_msgs.msg.FeatureVectorVector()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.pushable_object_centers.header.seq, _x.pushable_object_centers.header.stamp.secs, _x.pushable_object_centers.header.stamp.nsecs))
      _x = self.pushable_object_centers.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.pushable_object_centers.height, _x.pushable_object_centers.width))
      length = len(self.pushable_object_centers.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pushable_object_centers.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.pushable_object_centers.is_bigendian, _x.pushable_object_centers.point_step, _x.pushable_object_centers.row_step))
      _x = self.pushable_object_centers.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3I.pack(_x.pushable_object_centers.is_dense, _x.pushable_object_sizes.header.seq, _x.pushable_object_sizes.header.stamp.secs, _x.pushable_object_sizes.header.stamp.nsecs))
      _x = self.pushable_object_sizes.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.pushable_object_sizes.height, _x.pushable_object_sizes.width))
      length = len(self.pushable_object_sizes.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pushable_object_sizes.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.pushable_object_sizes.is_bigendian, _x.pushable_object_sizes.point_step, _x.pushable_object_sizes.row_step))
      _x = self.pushable_object_sizes.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3I.pack(_x.pushable_object_sizes.is_dense, _x.pushable_object_ids.header.seq, _x.pushable_object_ids.header.stamp.secs, _x.pushable_object_ids.header.stamp.nsecs))
      _x = self.pushable_object_ids.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.pushable_object_ids.height, _x.pushable_object_ids.width))
      length = len(self.pushable_object_ids.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pushable_object_ids.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.pushable_object_ids.is_bigendian, _x.pushable_object_ids.point_step, _x.pushable_object_ids.row_step))
      _x = self.pushable_object_ids.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.pushable_object_ids.is_dense))
      length = len(self.pushable_object_features.features)
      buff.write(_struct_I.pack(length))
      for val1 in self.pushable_object_features.features:
        length = len(val1.features)
        buff.write(_struct_I.pack(length))
        for val2 in val1.features:
          _x = val2
          buff.write(_struct_5f.pack(_x.min, _x.max, _x.avg, _x.var, _x.dev))
          length = len(val2.his)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.pack(pattern, *val2.his))
          _v1 = val2.stamp
          _v2 = _v1.data
          _x = _v2
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = val2
          buff.write(_struct_2fh.pack(_x.range_min, _x.range_max, _x.n_hist_bins))
          _x = val2.type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.val_type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pushable_object_centers is None:
        self.pushable_object_centers = sensor_msgs.msg.PointCloud2()
      if self.pushable_object_sizes is None:
        self.pushable_object_sizes = sensor_msgs.msg.PointCloud2()
      if self.pushable_object_ids is None:
        self.pushable_object_ids = sensor_msgs.msg.PointCloud2()
      if self.pushable_object_features is None:
        self.pushable_object_features = al_msgs.msg.FeatureVectorVector()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.pushable_object_centers.header.seq, _x.pushable_object_centers.header.stamp.secs, _x.pushable_object_centers.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pushable_object_centers.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pushable_object_centers.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pushable_object_centers.height, _x.pushable_object_centers.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pushable_object_centers.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.pushable_object_centers.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pushable_object_centers.is_bigendian, _x.pushable_object_centers.point_step, _x.pushable_object_centers.row_step,) = _struct_B2I.unpack(str[start:end])
      self.pushable_object_centers.is_bigendian = bool(self.pushable_object_centers.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pushable_object_centers.data = str[start:end].decode('utf-8')
      else:
        self.pushable_object_centers.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.pushable_object_centers.is_dense, _x.pushable_object_sizes.header.seq, _x.pushable_object_sizes.header.stamp.secs, _x.pushable_object_sizes.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      self.pushable_object_centers.is_dense = bool(self.pushable_object_centers.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pushable_object_sizes.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pushable_object_sizes.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pushable_object_sizes.height, _x.pushable_object_sizes.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pushable_object_sizes.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.pushable_object_sizes.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pushable_object_sizes.is_bigendian, _x.pushable_object_sizes.point_step, _x.pushable_object_sizes.row_step,) = _struct_B2I.unpack(str[start:end])
      self.pushable_object_sizes.is_bigendian = bool(self.pushable_object_sizes.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pushable_object_sizes.data = str[start:end].decode('utf-8')
      else:
        self.pushable_object_sizes.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.pushable_object_sizes.is_dense, _x.pushable_object_ids.header.seq, _x.pushable_object_ids.header.stamp.secs, _x.pushable_object_ids.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      self.pushable_object_sizes.is_dense = bool(self.pushable_object_sizes.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pushable_object_ids.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pushable_object_ids.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pushable_object_ids.height, _x.pushable_object_ids.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pushable_object_ids.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.pushable_object_ids.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pushable_object_ids.is_bigendian, _x.pushable_object_ids.point_step, _x.pushable_object_ids.row_step,) = _struct_B2I.unpack(str[start:end])
      self.pushable_object_ids.is_bigendian = bool(self.pushable_object_ids.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pushable_object_ids.data = str[start:end].decode('utf-8')
      else:
        self.pushable_object_ids.data = str[start:end]
      start = end
      end += 1
      (self.pushable_object_ids.is_dense,) = _struct_B.unpack(str[start:end])
      self.pushable_object_ids.is_dense = bool(self.pushable_object_ids.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pushable_object_features.features = []
      for i in range(0, length):
        val1 = al_msgs.msg.FeatureVector()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.features = []
        for i in range(0, length):
          val2 = al_msgs.msg.Feature()
          _x = val2
          start = end
          end += 20
          (_x.min, _x.max, _x.avg, _x.var, _x.dev,) = _struct_5f.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val2.his = struct.unpack(pattern, str[start:end])
          _v3 = val2.stamp
          _v4 = _v3.data
          _x = _v4
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          _x = val2
          start = end
          end += 10
          (_x.range_min, _x.range_max, _x.n_hist_bins,) = _struct_2fh.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.type = str[start:end].decode('utf-8')
          else:
            val2.type = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.val_type = str[start:end].decode('utf-8')
          else:
            val2.val_type = str[start:end]
          val1.features.append(val2)
        self.pushable_object_features.features.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.pushable_object_centers.header.seq, _x.pushable_object_centers.header.stamp.secs, _x.pushable_object_centers.header.stamp.nsecs))
      _x = self.pushable_object_centers.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.pushable_object_centers.height, _x.pushable_object_centers.width))
      length = len(self.pushable_object_centers.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pushable_object_centers.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.pushable_object_centers.is_bigendian, _x.pushable_object_centers.point_step, _x.pushable_object_centers.row_step))
      _x = self.pushable_object_centers.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3I.pack(_x.pushable_object_centers.is_dense, _x.pushable_object_sizes.header.seq, _x.pushable_object_sizes.header.stamp.secs, _x.pushable_object_sizes.header.stamp.nsecs))
      _x = self.pushable_object_sizes.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.pushable_object_sizes.height, _x.pushable_object_sizes.width))
      length = len(self.pushable_object_sizes.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pushable_object_sizes.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.pushable_object_sizes.is_bigendian, _x.pushable_object_sizes.point_step, _x.pushable_object_sizes.row_step))
      _x = self.pushable_object_sizes.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3I.pack(_x.pushable_object_sizes.is_dense, _x.pushable_object_ids.header.seq, _x.pushable_object_ids.header.stamp.secs, _x.pushable_object_ids.header.stamp.nsecs))
      _x = self.pushable_object_ids.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.pushable_object_ids.height, _x.pushable_object_ids.width))
      length = len(self.pushable_object_ids.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pushable_object_ids.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.pushable_object_ids.is_bigendian, _x.pushable_object_ids.point_step, _x.pushable_object_ids.row_step))
      _x = self.pushable_object_ids.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.pushable_object_ids.is_dense))
      length = len(self.pushable_object_features.features)
      buff.write(_struct_I.pack(length))
      for val1 in self.pushable_object_features.features:
        length = len(val1.features)
        buff.write(_struct_I.pack(length))
        for val2 in val1.features:
          _x = val2
          buff.write(_struct_5f.pack(_x.min, _x.max, _x.avg, _x.var, _x.dev))
          length = len(val2.his)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.his.tostring())
          _v5 = val2.stamp
          _v6 = _v5.data
          _x = _v6
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = val2
          buff.write(_struct_2fh.pack(_x.range_min, _x.range_max, _x.n_hist_bins))
          _x = val2.type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.val_type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pushable_object_centers is None:
        self.pushable_object_centers = sensor_msgs.msg.PointCloud2()
      if self.pushable_object_sizes is None:
        self.pushable_object_sizes = sensor_msgs.msg.PointCloud2()
      if self.pushable_object_ids is None:
        self.pushable_object_ids = sensor_msgs.msg.PointCloud2()
      if self.pushable_object_features is None:
        self.pushable_object_features = al_msgs.msg.FeatureVectorVector()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.pushable_object_centers.header.seq, _x.pushable_object_centers.header.stamp.secs, _x.pushable_object_centers.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pushable_object_centers.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pushable_object_centers.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pushable_object_centers.height, _x.pushable_object_centers.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pushable_object_centers.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.pushable_object_centers.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pushable_object_centers.is_bigendian, _x.pushable_object_centers.point_step, _x.pushable_object_centers.row_step,) = _struct_B2I.unpack(str[start:end])
      self.pushable_object_centers.is_bigendian = bool(self.pushable_object_centers.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pushable_object_centers.data = str[start:end].decode('utf-8')
      else:
        self.pushable_object_centers.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.pushable_object_centers.is_dense, _x.pushable_object_sizes.header.seq, _x.pushable_object_sizes.header.stamp.secs, _x.pushable_object_sizes.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      self.pushable_object_centers.is_dense = bool(self.pushable_object_centers.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pushable_object_sizes.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pushable_object_sizes.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pushable_object_sizes.height, _x.pushable_object_sizes.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pushable_object_sizes.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.pushable_object_sizes.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pushable_object_sizes.is_bigendian, _x.pushable_object_sizes.point_step, _x.pushable_object_sizes.row_step,) = _struct_B2I.unpack(str[start:end])
      self.pushable_object_sizes.is_bigendian = bool(self.pushable_object_sizes.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pushable_object_sizes.data = str[start:end].decode('utf-8')
      else:
        self.pushable_object_sizes.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.pushable_object_sizes.is_dense, _x.pushable_object_ids.header.seq, _x.pushable_object_ids.header.stamp.secs, _x.pushable_object_ids.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      self.pushable_object_sizes.is_dense = bool(self.pushable_object_sizes.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pushable_object_ids.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pushable_object_ids.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pushable_object_ids.height, _x.pushable_object_ids.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pushable_object_ids.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.pushable_object_ids.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pushable_object_ids.is_bigendian, _x.pushable_object_ids.point_step, _x.pushable_object_ids.row_step,) = _struct_B2I.unpack(str[start:end])
      self.pushable_object_ids.is_bigendian = bool(self.pushable_object_ids.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pushable_object_ids.data = str[start:end].decode('utf-8')
      else:
        self.pushable_object_ids.data = str[start:end]
      start = end
      end += 1
      (self.pushable_object_ids.is_dense,) = _struct_B.unpack(str[start:end])
      self.pushable_object_ids.is_dense = bool(self.pushable_object_ids.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pushable_object_features.features = []
      for i in range(0, length):
        val1 = al_msgs.msg.FeatureVector()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.features = []
        for i in range(0, length):
          val2 = al_msgs.msg.Feature()
          _x = val2
          start = end
          end += 20
          (_x.min, _x.max, _x.avg, _x.var, _x.dev,) = _struct_5f.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val2.his = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          _v7 = val2.stamp
          _v8 = _v7.data
          _x = _v8
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          _x = val2
          start = end
          end += 10
          (_x.range_min, _x.range_max, _x.n_hist_bins,) = _struct_2fh.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.type = str[start:end].decode('utf-8')
          else:
            val2.type = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.val_type = str[start:end].decode('utf-8')
          else:
            val2.val_type = str[start:end]
          val1.features.append(val2)
        self.pushable_object_features.features.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_IBI = struct.Struct("<IBI")
_struct_B = struct.Struct("<B")
_struct_2fh = struct.Struct("<2fh")
_struct_3I = struct.Struct("<3I")
_struct_B3I = struct.Struct("<B3I")
_struct_B2I = struct.Struct("<B2I")
_struct_5f = struct.Struct("<5f")
_struct_2I = struct.Struct("<2I")
class PerceptionAll(object):
  _type          = 'al_srvs/PerceptionAll'
  _md5sum = '2c61a928039763c8b292cbae619b5a2e'
  _request_class  = PerceptionAllRequest
  _response_class = PerceptionAllResponse

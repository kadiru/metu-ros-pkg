/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_ext_utils/tabletop_object_detector/srv/TabletopObjectRecognition.srv */
#ifndef TABLETOP_OBJECT_DETECTOR_SERVICE_TABLETOPOBJECTRECOGNITION_H
#define TABLETOP_OBJECT_DETECTOR_SERVICE_TABLETOPOBJECTRECOGNITION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "tabletop_object_detector/Table.h"
#include "sensor_msgs/PointCloud.h"


#include "household_objects_database_msgs/DatabaseModelPoseList.h"

namespace tabletop_object_detector
{
template <class ContainerAllocator>
struct TabletopObjectRecognitionRequest_ {
  typedef TabletopObjectRecognitionRequest_<ContainerAllocator> Type;

  TabletopObjectRecognitionRequest_()
  : table()
  , clusters()
  , num_models(0)
  , perform_fit_merge(false)
  {
  }

  TabletopObjectRecognitionRequest_(const ContainerAllocator& _alloc)
  : table(_alloc)
  , clusters(_alloc)
  , num_models(0)
  , perform_fit_merge(false)
  {
  }

  typedef  ::tabletop_object_detector::Table_<ContainerAllocator>  _table_type;
   ::tabletop_object_detector::Table_<ContainerAllocator>  table;

  typedef std::vector< ::sensor_msgs::PointCloud_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::PointCloud_<ContainerAllocator> >::other >  _clusters_type;
  std::vector< ::sensor_msgs::PointCloud_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::PointCloud_<ContainerAllocator> >::other >  clusters;

  typedef int32_t _num_models_type;
  int32_t num_models;

  typedef uint8_t _perform_fit_merge_type;
  uint8_t perform_fit_merge;


  typedef boost::shared_ptr< ::tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TabletopObjectRecognitionRequest
typedef  ::tabletop_object_detector::TabletopObjectRecognitionRequest_<std::allocator<void> > TabletopObjectRecognitionRequest;

typedef boost::shared_ptr< ::tabletop_object_detector::TabletopObjectRecognitionRequest> TabletopObjectRecognitionRequestPtr;
typedef boost::shared_ptr< ::tabletop_object_detector::TabletopObjectRecognitionRequest const> TabletopObjectRecognitionRequestConstPtr;


template <class ContainerAllocator>
struct TabletopObjectRecognitionResponse_ {
  typedef TabletopObjectRecognitionResponse_<ContainerAllocator> Type;

  TabletopObjectRecognitionResponse_()
  : models()
  , cluster_model_indices()
  {
  }

  TabletopObjectRecognitionResponse_(const ContainerAllocator& _alloc)
  : models(_alloc)
  , cluster_model_indices(_alloc)
  {
  }

  typedef std::vector< ::household_objects_database_msgs::DatabaseModelPoseList_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::household_objects_database_msgs::DatabaseModelPoseList_<ContainerAllocator> >::other >  _models_type;
  std::vector< ::household_objects_database_msgs::DatabaseModelPoseList_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::household_objects_database_msgs::DatabaseModelPoseList_<ContainerAllocator> >::other >  models;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _cluster_model_indices_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  cluster_model_indices;


  typedef boost::shared_ptr< ::tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TabletopObjectRecognitionResponse
typedef  ::tabletop_object_detector::TabletopObjectRecognitionResponse_<std::allocator<void> > TabletopObjectRecognitionResponse;

typedef boost::shared_ptr< ::tabletop_object_detector::TabletopObjectRecognitionResponse> TabletopObjectRecognitionResponsePtr;
typedef boost::shared_ptr< ::tabletop_object_detector::TabletopObjectRecognitionResponse const> TabletopObjectRecognitionResponseConstPtr;

struct TabletopObjectRecognition
{

typedef TabletopObjectRecognitionRequest Request;
typedef TabletopObjectRecognitionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct TabletopObjectRecognition
} // namespace tabletop_object_detector

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "197bf138763e73e721e55b16fedc33a9";
  }

  static const char* value(const  ::tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x197bf138763e73e7ULL;
  static const uint64_t static_value2 = 0x21e55b16fedc33a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tabletop_object_detector/TabletopObjectRecognitionRequest";
  }

  static const char* value(const  ::tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
Table table\n\
\n\
\n\
sensor_msgs/PointCloud[] clusters\n\
\n\
\n\
int32 num_models\n\
\n\
\n\
bool perform_fit_merge\n\
\n\
\n\
================================================================================\n\
MSG: tabletop_object_detector/Table\n\
# Informs that a planar table has been detected at a given location\n\
\n\
# The pose gives you the transform that take you to the coordinate system\n\
# of the table, with the origin somewhere in the table plane and the \n\
# z axis normal to the plane\n\
geometry_msgs/PoseStamped pose\n\
\n\
# These values give you the observed extents of the table, along x and y,\n\
# in the table's own coordinate system (above)\n\
# there is no guarantee that the origin of the table coordinate system is\n\
# inside the boundary defined by these values. \n\
float32 x_min\n\
float32 x_max\n\
float32 y_min\n\
float32 y_max\n\
\n\
# There is no guarantee that the table does NOT extend further than these \n\
# values; this is just as far as we've observed it.\n\
\n\
\n\
# Newer table definition as triangle mesh of convex hull (relative to pose)\n\
arm_navigation_msgs/Shape convex_hull\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/Shape\n\
byte SPHERE=0\n\
byte BOX=1\n\
byte CYLINDER=2\n\
byte MESH=3\n\
\n\
byte type\n\
\n\
\n\
#### define sphere, box, cylinder ####\n\
# the origin of each shape is considered at the shape's center\n\
\n\
# for sphere\n\
# radius := dimensions[0]\n\
\n\
# for cylinder\n\
# radius := dimensions[0]\n\
# length := dimensions[1]\n\
# the length is along the Z axis\n\
\n\
# for box\n\
# size_x := dimensions[0]\n\
# size_y := dimensions[1]\n\
# size_z := dimensions[2]\n\
float64[] dimensions\n\
\n\
\n\
#### define mesh ####\n\
\n\
# list of triangles; triangle k is defined by tre vertices located\n\
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]\n\
int32[] triangles\n\
geometry_msgs/Point[] vertices\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud\n\
# This message holds a collection of 3d points, plus optional additional\n\
# information about each point.\n\
\n\
# Time of sensor data acquisition, coordinate frame ID.\n\
Header header\n\
\n\
# Array of 3d points. Each Point32 should be interpreted as a 3d point\n\
# in the frame given in the header.\n\
geometry_msgs/Point32[] points\n\
\n\
# Each channel should have the same number of elements as points array,\n\
# and the data in each channel should correspond 1:1 with each point.\n\
# Channel names in common practice are listed in ChannelFloat32.msg.\n\
ChannelFloat32[] channels\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: sensor_msgs/ChannelFloat32\n\
# This message is used by the PointCloud message to hold optional data\n\
# associated with each point in the cloud. The length of the values\n\
# array should be the same as the length of the points array in the\n\
# PointCloud, and each value should be associated with the corresponding\n\
# point.\n\
\n\
# Channel names in existing practice include:\n\
#   \"u\", \"v\" - row and column (respectively) in the left stereo image.\n\
#              This is opposite to usual conventions but remains for\n\
#              historical reasons. The newer PointCloud2 message has no\n\
#              such problem.\n\
#   \"rgb\" - For point clouds produced by color stereo cameras. uint8\n\
#           (R,G,B) values packed into the least significant 24 bits,\n\
#           in order.\n\
#   \"intensity\" - laser or pixel intensity.\n\
#   \"distance\"\n\
\n\
# The channel name should give semantics of the channel (e.g.\n\
# \"intensity\" instead of \"value\").\n\
string name\n\
\n\
# The values array should be 1-1 with the elements of the associated\n\
# PointCloud.\n\
float32[] values\n\
\n\
";
  }

  static const char* value(const  ::tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f63a7c7df1c6f8db6a82e83c1186e00e";
  }

  static const char* value(const  ::tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf63a7c7df1c6f8dbULL;
  static const uint64_t static_value2 = 0x6a82e83c1186e00eULL;
};

template<class ContainerAllocator>
struct DataType< ::tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tabletop_object_detector/TabletopObjectRecognitionResponse";
  }

  static const char* value(const  ::tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
household_objects_database_msgs/DatabaseModelPoseList[] models\n\
\n\
\n\
\n\
int32[] cluster_model_indices\n\
\n\
\n\
================================================================================\n\
MSG: household_objects_database_msgs/DatabaseModelPoseList\n\
# stores a list of possible database models recognition results\n\
DatabaseModelPose[] model_list\n\
================================================================================\n\
MSG: household_objects_database_msgs/DatabaseModelPose\n\
# Informs that a specific model from the Model Database has been \n\
# identified at a certain location\n\
\n\
# the database id of the model\n\
int32 model_id\n\
\n\
# the pose that it can be found in\n\
geometry_msgs/PoseStamped pose\n\
\n\
# a measure of the confidence level in this detection result\n\
float32 confidence\n\
\n\
# the name of the object detector that generated this detection result\n\
string detector_name\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.table);
    stream.next(m.clusters);
    stream.next(m.num_models);
    stream.next(m.perform_fit_merge);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TabletopObjectRecognitionRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.models);
    stream.next(m.cluster_model_indices);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TabletopObjectRecognitionResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<tabletop_object_detector::TabletopObjectRecognition> {
  static const char* value() 
  {
    return "f5867bc89b17633ae48681b939f1fbf7";
  }

  static const char* value(const tabletop_object_detector::TabletopObjectRecognition&) { return value(); } 
};

template<>
struct DataType<tabletop_object_detector::TabletopObjectRecognition> {
  static const char* value() 
  {
    return "tabletop_object_detector/TabletopObjectRecognition";
  }

  static const char* value(const tabletop_object_detector::TabletopObjectRecognition&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f5867bc89b17633ae48681b939f1fbf7";
  }

  static const char* value(const tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tabletop_object_detector/TabletopObjectRecognition";
  }

  static const char* value(const tabletop_object_detector::TabletopObjectRecognitionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f5867bc89b17633ae48681b939f1fbf7";
  }

  static const char* value(const tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tabletop_object_detector/TabletopObjectRecognition";
  }

  static const char* value(const tabletop_object_detector::TabletopObjectRecognitionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TABLETOP_OBJECT_DETECTOR_SERVICE_TABLETOPOBJECTRECOGNITION_H


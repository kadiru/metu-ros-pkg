/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_msgs/msg/Scene.msg */
#ifndef AL_MSGS_MESSAGE_SCENE_H
#define AL_MSGS_MESSAGE_SCENE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "al_msgs/Entities.h"

namespace al_msgs
{
template <class ContainerAllocator>
struct Scene_ {
  typedef Scene_<ContainerAllocator> Type;

  Scene_()
  : entities()
  , human_partner_exists(false)
  {
  }

  Scene_(const ContainerAllocator& _alloc)
  : entities(_alloc)
  , human_partner_exists(false)
  {
  }

  typedef  ::al_msgs::Entities_<ContainerAllocator>  _entities_type;
   ::al_msgs::Entities_<ContainerAllocator>  entities;

  typedef uint8_t _human_partner_exists_type;
  uint8_t human_partner_exists;


  typedef boost::shared_ptr< ::al_msgs::Scene_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_msgs::Scene_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Scene
typedef  ::al_msgs::Scene_<std::allocator<void> > Scene;

typedef boost::shared_ptr< ::al_msgs::Scene> ScenePtr;
typedef boost::shared_ptr< ::al_msgs::Scene const> SceneConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_msgs::Scene_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_msgs::Scene_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Scene_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Scene_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_msgs::Scene_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5626ba3b4ed9f6b10275d25b4698aa30";
  }

  static const char* value(const  ::al_msgs::Scene_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5626ba3b4ed9f6b1ULL;
  static const uint64_t static_value2 = 0x0275d25b4698aa30ULL;
};

template<class ContainerAllocator>
struct DataType< ::al_msgs::Scene_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/Scene";
  }

  static const char* value(const  ::al_msgs::Scene_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_msgs::Scene_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/Entities entities\n\
bool human_partner_exists\n\
\n\
================================================================================\n\
MSG: al_msgs/Entities\n\
Header header\n\
al_msgs/Entity[] entities\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: al_msgs/Entity\n\
arm_navigation_msgs/CollisionObject collision_object\n\
sensor_msgs/PointCloud2 cloud_object\n\
al_msgs/FeatureVector feature_vector\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/CollisionObject\n\
# a header, used for interpreting the poses\n\
Header header\n\
\n\
# the id of the object\n\
string id\n\
\n\
# The padding used for filtering points near the object.\n\
# This does not affect collision checking for the object.  \n\
# Set to negative to get zero padding.\n\
float32 padding\n\
\n\
#This contains what is to be done with the object\n\
CollisionObjectOperation operation\n\
\n\
#the shapes associated with the object\n\
arm_navigation_msgs/Shape[] shapes\n\
\n\
#the poses associated with the shapes - will be transformed using the header\n\
geometry_msgs/Pose[] poses\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/CollisionObjectOperation\n\
#Puts the object into the environment\n\
#or updates the object if already added\n\
byte ADD=0\n\
\n\
#Removes the object from the environment entirely\n\
byte REMOVE=1\n\
\n\
#Only valid within the context of a CollisionAttachedObject message\n\
#Will be ignored if sent with an CollisionObject message\n\
#Takes an attached object, detaches from the attached link\n\
#But adds back in as regular object\n\
byte DETACH_AND_ADD_AS_OBJECT=2\n\
\n\
#Only valid within the context of a CollisionAttachedObject message\n\
#Will be ignored if sent with an CollisionObject message\n\
#Takes current object in the environment and removes it as\n\
#a regular object\n\
byte ATTACH_AND_REMOVE_AS_OBJECT=3\n\
\n\
# Byte code for operation\n\
byte operation\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/Shape\n\
byte SPHERE=0\n\
byte BOX=1\n\
byte CYLINDER=2\n\
byte MESH=3\n\
\n\
byte type\n\
\n\
\n\
#### define sphere, box, cylinder ####\n\
# the origin of each shape is considered at the shape's center\n\
\n\
# for sphere\n\
# radius := dimensions[0]\n\
\n\
# for cylinder\n\
# radius := dimensions[0]\n\
# length := dimensions[1]\n\
# the length is along the Z axis\n\
\n\
# for box\n\
# size_x := dimensions[0]\n\
# size_y := dimensions[1]\n\
# size_z := dimensions[2]\n\
float64[] dimensions\n\
\n\
\n\
#### define mesh ####\n\
\n\
# list of triangles; triangle k is defined by tre vertices located\n\
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]\n\
int32[] triangles\n\
geometry_msgs/Point[] vertices\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
================================================================================\n\
MSG: al_msgs/FeatureVector\n\
al_msgs/Feature[] features\n\
\n\
================================================================================\n\
MSG: al_msgs/Feature\n\
float32 min # min value\n\
float32 max # max value\n\
float32 avg # average value\n\
float32 var # variance\n\
float32 dev # standard deviation\n\
float32[] his # histogram\n\
std_msgs/Time stamp # time stamp when this feature is calculated\n\
float32 range_min # min value that this feature can get\n\
float32 range_max # max value that this feature can get\n\
int16 n_hist_bins # number of bins in its histogram\n\
string NORMAL_AZI=NormalAzimuth\n\
string NORMAL_ZEN=NormalZenith\n\
string CURV_MIN=MinCurvature\n\
string CURV_MAX=MaxCurvature\n\
string CURV_MEAN=MeanCurvature\n\
string CURV_GAUSS=GaussCurvature\n\
string SHAPE_INDEX=ShapeIndex\n\
string R_COLOR=RedColor\n\
string G_COLOR=GreenColor\n\
string B_COLOR=BlueColor\n\
string POS_X=PositionX\n\
string POS_Y=PositionY\n\
string POS_Z=PositionZ\n\
string ROT_T=RotationTheta\n\
string DIM_X=DimensionX\n\
string DIM_Y=DimensionY\n\
string DIM_Z=DimensionZ\n\
string OBJECT_PRESENCE=ObjectPresence\n\
string HUMAN_TORSO_X=HumanTorsoX\n\
string HUMAN_TORSO_Y=HumanTorsoY\n\
string HUMAN_TORSO_Z=HumanTorsoZ\n\
string HUMAN_TORSO_ROLL=HumanTorsoRoll\n\
string HUMAN_TORSO_PITCH=HumanTorsoPitch\n\
string HUMAN_TORSO_YAW=HumanTorsoYaw\n\
string HUMAN_HEAD_ROLL=HumanHeadRoll\n\
string HUMAN_HEAD_PITCH=HumanHeadPitch\n\
string HUMAN_HEAD_YAW=HumanHeadYaw\n\
string HUMAN_PRESENCE=HumanPresence\n\
string AFFORDANCE_ACC=AffordanceAccuracy\n\
string type\n\
string DISPERSIVE_VALUED=DispersiveValued\n\
string SINGLE_VALUED=SingleValued\n\
string val_type\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Time\n\
time data\n\
\n\
";
  }

  static const char* value(const  ::al_msgs::Scene_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_msgs::Scene_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.entities);
    stream.next(m.human_partner_exists);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Scene_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_msgs::Scene_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_msgs::Scene_<ContainerAllocator> & v) 
  {
    s << indent << "entities: ";
s << std::endl;
    Printer< ::al_msgs::Entities_<ContainerAllocator> >::stream(s, indent + "  ", v.entities);
    s << indent << "human_partner_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.human_partner_exists);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_MSGS_MESSAGE_SCENE_H


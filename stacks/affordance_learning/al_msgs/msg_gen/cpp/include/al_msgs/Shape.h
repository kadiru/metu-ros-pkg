/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_msgs/msg/Shape.msg */
#ifndef AL_MSGS_MESSAGE_SHAPE_H
#define AL_MSGS_MESSAGE_SHAPE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace al_msgs
{
template <class ContainerAllocator>
struct Shape_ {
  typedef Shape_<ContainerAllocator> Type;

  Shape_()
  : shape(0)
  , prob(0.0)
  {
  }

  Shape_(const ContainerAllocator& _alloc)
  : shape(0)
  , prob(0.0)
  {
  }

  typedef int8_t _shape_type;
  int8_t shape;

  typedef float _prob_type;
  float prob;

  enum { MAX_SHAPE_INDEX = 6 };
  enum { CUP = 0 };
  enum { BOX = 1 };
  enum { CYLINDER = 2 };
  enum { BALL = 3 };
  enum { SPHERE = 4 };
  enum { CUBE = 5 };
  enum { OTHER = 6 };

  typedef boost::shared_ptr< ::al_msgs::Shape_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_msgs::Shape_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Shape
typedef  ::al_msgs::Shape_<std::allocator<void> > Shape;

typedef boost::shared_ptr< ::al_msgs::Shape> ShapePtr;
typedef boost::shared_ptr< ::al_msgs::Shape const> ShapeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_msgs::Shape_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_msgs::Shape_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Shape_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Shape_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_msgs::Shape_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aee492983d95f32390a434b11dcf6a8d";
  }

  static const char* value(const  ::al_msgs::Shape_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaee492983d95f323ULL;
  static const uint64_t static_value2 = 0x90a434b11dcf6a8dULL;
};

template<class ContainerAllocator>
struct DataType< ::al_msgs::Shape_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/Shape";
  }

  static const char* value(const  ::al_msgs::Shape_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_msgs::Shape_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 MAX_SHAPE_INDEX=6\n\
int8 CUP=0\n\
int8 BOX=1\n\
int8 CYLINDER=2\n\
int8 BALL=3\n\
int8 SPHERE=4\n\
int8 CUBE=5\n\
int8 OTHER=6\n\
int8 shape\n\
float32 prob\n\
\n\
";
  }

  static const char* value(const  ::al_msgs::Shape_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::al_msgs::Shape_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_msgs::Shape_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.shape);
    stream.next(m.prob);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Shape_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_msgs::Shape_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_msgs::Shape_<ContainerAllocator> & v) 
  {
    s << indent << "shape: ";
    Printer<int8_t>::stream(s, indent + "  ", v.shape);
    s << indent << "prob: ";
    Printer<float>::stream(s, indent + "  ", v.prob);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_MSGS_MESSAGE_SHAPE_H


/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_msgs/msg/Shapes.msg */
#ifndef AL_MSGS_MESSAGE_SHAPES_H
#define AL_MSGS_MESSAGE_SHAPES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "al_msgs/Shape.h"

namespace al_msgs
{
template <class ContainerAllocator>
struct Shapes_ {
  typedef Shapes_<ContainerAllocator> Type;

  Shapes_()
  : shapes()
  {
  }

  Shapes_(const ContainerAllocator& _alloc)
  : shapes(_alloc)
  {
  }

  typedef std::vector< ::al_msgs::Shape_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::al_msgs::Shape_<ContainerAllocator> >::other >  _shapes_type;
  std::vector< ::al_msgs::Shape_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::al_msgs::Shape_<ContainerAllocator> >::other >  shapes;


  typedef boost::shared_ptr< ::al_msgs::Shapes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_msgs::Shapes_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Shapes
typedef  ::al_msgs::Shapes_<std::allocator<void> > Shapes;

typedef boost::shared_ptr< ::al_msgs::Shapes> ShapesPtr;
typedef boost::shared_ptr< ::al_msgs::Shapes const> ShapesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_msgs::Shapes_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_msgs::Shapes_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Shapes_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Shapes_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_msgs::Shapes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "96f8e930a1e7cc363a4dedc602d6617a";
  }

  static const char* value(const  ::al_msgs::Shapes_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x96f8e930a1e7cc36ULL;
  static const uint64_t static_value2 = 0x3a4dedc602d6617aULL;
};

template<class ContainerAllocator>
struct DataType< ::al_msgs::Shapes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/Shapes";
  }

  static const char* value(const  ::al_msgs::Shapes_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_msgs::Shapes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/Shape[] shapes\n\
\n\
================================================================================\n\
MSG: al_msgs/Shape\n\
int8 MAX_SHAPE_INDEX=6\n\
int8 CUP=0\n\
int8 BOX=1\n\
int8 CYLINDER=2\n\
int8 BALL=3\n\
int8 SPHERE=4\n\
int8 CUBE=5\n\
int8 OTHER=6\n\
int8 shape\n\
float32 prob\n\
\n\
";
  }

  static const char* value(const  ::al_msgs::Shapes_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_msgs::Shapes_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.shapes);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Shapes_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_msgs::Shapes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_msgs::Shapes_<ContainerAllocator> & v) 
  {
    s << indent << "shapes[]" << std::endl;
    for (size_t i = 0; i < v.shapes.size(); ++i)
    {
      s << indent << "  shapes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::al_msgs::Shape_<ContainerAllocator> >::stream(s, indent + "    ", v.shapes[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_MSGS_MESSAGE_SHAPES_H


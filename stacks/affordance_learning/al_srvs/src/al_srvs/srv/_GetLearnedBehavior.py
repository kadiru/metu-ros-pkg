"""autogenerated by genpy from al_srvs/GetLearnedBehaviorRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import al_msgs.msg
import std_msgs.msg

class GetLearnedBehaviorRequest(genpy.Message):
  _md5sum = "fca08d53898ab478cb8cb76d2347e1f1"
  _type = "al_srvs/GetLearnedBehaviorRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """al_msgs/FeatureVector feature_vector
int8 effect_id

================================================================================
MSG: al_msgs/FeatureVector
al_msgs/Feature[] features

================================================================================
MSG: al_msgs/Feature
float32 min # min value
float32 max # max value
float32 avg # average value
float32 var # variance
float32 dev # standard deviation
float32[] his # histogram
std_msgs/Time stamp # time stamp when this feature is calculated
float32 range_min # min value that this feature can get
float32 range_max # max value that this feature can get
int16 n_hist_bins # number of bins in its histogram
string NORMAL_AZI=NormalAzimuth
string NORMAL_ZEN=NormalZenith
string CURV_MIN=MinCurvature
string CURV_MAX=MaxCurvature
string CURV_MEAN=MeanCurvature
string CURV_GAUSS=GaussCurvature
string SHAPE_INDEX=ShapeIndex
string R_COLOR=RedColor
string G_COLOR=GreenColor
string B_COLOR=BlueColor
string POS_X=PositionX
string POS_Y=PositionY
string POS_Z=PositionZ
string ROT_T=RotationTheta
string DIM_X=DimensionX
string DIM_Y=DimensionY
string DIM_Z=DimensionZ
string OBJECT_PRESENCE=ObjectPresence
string HUMAN_TORSO_X=HumanTorsoX
string HUMAN_TORSO_Y=HumanTorsoY
string HUMAN_TORSO_Z=HumanTorsoZ
string HUMAN_TORSO_ROLL=HumanTorsoRoll
string HUMAN_TORSO_PITCH=HumanTorsoPitch
string HUMAN_TORSO_YAW=HumanTorsoYaw
string HUMAN_HEAD_ROLL=HumanHeadRoll
string HUMAN_HEAD_PITCH=HumanHeadPitch
string HUMAN_HEAD_YAW=HumanHeadYaw
string HUMAN_PRESENCE=HumanPresence
string AFFORDANCE_ACC=AffordanceAccuracy
string type
string DISPERSIVE_VALUED=DispersiveValued
string SINGLE_VALUED=SingleValued
string val_type


================================================================================
MSG: std_msgs/Time
time data

"""
  __slots__ = ['feature_vector','effect_id']
  _slot_types = ['al_msgs/FeatureVector','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       feature_vector,effect_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetLearnedBehaviorRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.feature_vector is None:
        self.feature_vector = al_msgs.msg.FeatureVector()
      if self.effect_id is None:
        self.effect_id = 0
    else:
      self.feature_vector = al_msgs.msg.FeatureVector()
      self.effect_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.feature_vector.features)
      buff.write(_struct_I.pack(length))
      for val1 in self.feature_vector.features:
        _x = val1
        buff.write(_struct_5f.pack(_x.min, _x.max, _x.avg, _x.var, _x.dev))
        length = len(val1.his)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.his))
        _v1 = val1.stamp
        _v2 = _v1.data
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_struct_2fh.pack(_x.range_min, _x.range_max, _x.n_hist_bins))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.val_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_b.pack(self.effect_id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.feature_vector is None:
        self.feature_vector = al_msgs.msg.FeatureVector()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feature_vector.features = []
      for i in range(0, length):
        val1 = al_msgs.msg.Feature()
        _x = val1
        start = end
        end += 20
        (_x.min, _x.max, _x.avg, _x.var, _x.dev,) = _struct_5f.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.his = struct.unpack(pattern, str[start:end])
        _v3 = val1.stamp
        _v4 = _v3.data
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        _x = val1
        start = end
        end += 10
        (_x.range_min, _x.range_max, _x.n_hist_bins,) = _struct_2fh.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.val_type = str[start:end].decode('utf-8')
        else:
          val1.val_type = str[start:end]
        self.feature_vector.features.append(val1)
      start = end
      end += 1
      (self.effect_id,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.feature_vector.features)
      buff.write(_struct_I.pack(length))
      for val1 in self.feature_vector.features:
        _x = val1
        buff.write(_struct_5f.pack(_x.min, _x.max, _x.avg, _x.var, _x.dev))
        length = len(val1.his)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.his.tostring())
        _v5 = val1.stamp
        _v6 = _v5.data
        _x = _v6
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_struct_2fh.pack(_x.range_min, _x.range_max, _x.n_hist_bins))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.val_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_b.pack(self.effect_id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.feature_vector is None:
        self.feature_vector = al_msgs.msg.FeatureVector()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feature_vector.features = []
      for i in range(0, length):
        val1 = al_msgs.msg.Feature()
        _x = val1
        start = end
        end += 20
        (_x.min, _x.max, _x.avg, _x.var, _x.dev,) = _struct_5f.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.his = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v7 = val1.stamp
        _v8 = _v7.data
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        _x = val1
        start = end
        end += 10
        (_x.range_min, _x.range_max, _x.n_hist_bins,) = _struct_2fh.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.val_type = str[start:end].decode('utf-8')
        else:
          val1.val_type = str[start:end]
        self.feature_vector.features.append(val1)
      start = end
      end += 1
      (self.effect_id,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2fh = struct.Struct("<2fh")
_struct_5f = struct.Struct("<5f")
_struct_b = struct.Struct("<b")
_struct_2I = struct.Struct("<2I")
"""autogenerated by genpy from al_srvs/GetLearnedBehaviorResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetLearnedBehaviorResponse(genpy.Message):
  _md5sum = "f2251402e18e24532c1c2415eba9fc69"
  _type = "al_srvs/GetLearnedBehaviorResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 behavior_id



"""
  __slots__ = ['behavior_id']
  _slot_types = ['int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       behavior_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetLearnedBehaviorResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.behavior_id is None:
        self.behavior_id = 0
    else:
      self.behavior_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.behavior_id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.behavior_id,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.behavior_id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.behavior_id,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
class GetLearnedBehavior(object):
  _type          = 'al_srvs/GetLearnedBehavior'
  _md5sum = 'fcf4afdd6b1a98d45b3dafa97a4d7953'
  _request_class  = GetLearnedBehaviorRequest
  _response_class = GetLearnedBehaviorResponse

/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_msgs/msg/Feature.msg */
#ifndef AL_MSGS_MESSAGE_FEATURE_H
#define AL_MSGS_MESSAGE_FEATURE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Time.h"

namespace al_msgs
{
template <class ContainerAllocator>
struct Feature_ {
  typedef Feature_<ContainerAllocator> Type;

  Feature_()
  : min(0.0)
  , max(0.0)
  , avg(0.0)
  , var(0.0)
  , dev(0.0)
  , his()
  , stamp()
  , range_min(0.0)
  , range_max(0.0)
  , n_hist_bins(0)
  , type()
  , val_type()
  {
  }

  Feature_(const ContainerAllocator& _alloc)
  : min(0.0)
  , max(0.0)
  , avg(0.0)
  , var(0.0)
  , dev(0.0)
  , his(_alloc)
  , stamp(_alloc)
  , range_min(0.0)
  , range_max(0.0)
  , n_hist_bins(0)
  , type(_alloc)
  , val_type(_alloc)
  {
  }

  typedef float _min_type;
  float min;

  typedef float _max_type;
  float max;

  typedef float _avg_type;
  float avg;

  typedef float _var_type;
  float var;

  typedef float _dev_type;
  float dev;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _his_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  his;

  typedef  ::std_msgs::Time_<ContainerAllocator>  _stamp_type;
   ::std_msgs::Time_<ContainerAllocator>  stamp;

  typedef float _range_min_type;
  float range_min;

  typedef float _range_max_type;
  float range_max;

  typedef int16_t _n_hist_bins_type;
  int16_t n_hist_bins;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  type;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _val_type_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  val_type;

  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NORMAL_AZI;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NORMAL_ZEN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CURV_MIN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CURV_MAX;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CURV_MEAN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CURV_GAUSS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SHAPE_INDEX;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  R_COLOR;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  G_COLOR;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  B_COLOR;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  POS_X;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  POS_Y;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  POS_Z;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ROT_T;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  DIM_X;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  DIM_Y;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  DIM_Z;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OBJECT_PRESENCE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HUMAN_TORSO_X;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HUMAN_TORSO_Y;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HUMAN_TORSO_Z;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HUMAN_TORSO_ROLL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HUMAN_TORSO_PITCH;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HUMAN_TORSO_YAW;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HUMAN_HEAD_ROLL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HUMAN_HEAD_PITCH;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HUMAN_HEAD_YAW;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HUMAN_PRESENCE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  AFFORDANCE_ACC;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  DISPERSIVE_VALUED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SINGLE_VALUED;

  typedef boost::shared_ptr< ::al_msgs::Feature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_msgs::Feature_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Feature
typedef  ::al_msgs::Feature_<std::allocator<void> > Feature;

typedef boost::shared_ptr< ::al_msgs::Feature> FeaturePtr;
typedef boost::shared_ptr< ::al_msgs::Feature const> FeatureConstPtr;

template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::NORMAL_AZI = "NormalAzimuth";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::NORMAL_ZEN = "NormalZenith";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::CURV_MIN = "MinCurvature";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::CURV_MAX = "MaxCurvature";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::CURV_MEAN = "MeanCurvature";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::CURV_GAUSS = "GaussCurvature";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::SHAPE_INDEX = "ShapeIndex";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::R_COLOR = "RedColor";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::G_COLOR = "GreenColor";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::B_COLOR = "BlueColor";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::POS_X = "PositionX";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::POS_Y = "PositionY";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::POS_Z = "PositionZ";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::ROT_T = "RotationTheta";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::DIM_X = "DimensionX";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::DIM_Y = "DimensionY";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::DIM_Z = "DimensionZ";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::OBJECT_PRESENCE = "ObjectPresence";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::HUMAN_TORSO_X = "HumanTorsoX";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::HUMAN_TORSO_Y = "HumanTorsoY";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::HUMAN_TORSO_Z = "HumanTorsoZ";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::HUMAN_TORSO_ROLL = "HumanTorsoRoll";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::HUMAN_TORSO_PITCH = "HumanTorsoPitch";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::HUMAN_TORSO_YAW = "HumanTorsoYaw";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::HUMAN_HEAD_ROLL = "HumanHeadRoll";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::HUMAN_HEAD_PITCH = "HumanHeadPitch";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::HUMAN_HEAD_YAW = "HumanHeadYaw";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::HUMAN_PRESENCE = "HumanPresence";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::AFFORDANCE_ACC = "AffordanceAccuracy";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::DISPERSIVE_VALUED = "DispersiveValued";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Feature_<ContainerAllocator>::SINGLE_VALUED = "SingleValued";

template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_msgs::Feature_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_msgs::Feature_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Feature_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Feature_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_msgs::Feature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "547e53b14bcf375d87584ca0fa21313a";
  }

  static const char* value(const  ::al_msgs::Feature_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x547e53b14bcf375dULL;
  static const uint64_t static_value2 = 0x87584ca0fa21313aULL;
};

template<class ContainerAllocator>
struct DataType< ::al_msgs::Feature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/Feature";
  }

  static const char* value(const  ::al_msgs::Feature_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_msgs::Feature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 min # min value\n\
float32 max # max value\n\
float32 avg # average value\n\
float32 var # variance\n\
float32 dev # standard deviation\n\
float32[] his # histogram\n\
std_msgs/Time stamp # time stamp when this feature is calculated\n\
float32 range_min # min value that this feature can get\n\
float32 range_max # max value that this feature can get\n\
int16 n_hist_bins # number of bins in its histogram\n\
string NORMAL_AZI=NormalAzimuth\n\
string NORMAL_ZEN=NormalZenith\n\
string CURV_MIN=MinCurvature\n\
string CURV_MAX=MaxCurvature\n\
string CURV_MEAN=MeanCurvature\n\
string CURV_GAUSS=GaussCurvature\n\
string SHAPE_INDEX=ShapeIndex\n\
string R_COLOR=RedColor\n\
string G_COLOR=GreenColor\n\
string B_COLOR=BlueColor\n\
string POS_X=PositionX\n\
string POS_Y=PositionY\n\
string POS_Z=PositionZ\n\
string ROT_T=RotationTheta\n\
string DIM_X=DimensionX\n\
string DIM_Y=DimensionY\n\
string DIM_Z=DimensionZ\n\
string OBJECT_PRESENCE=ObjectPresence\n\
string HUMAN_TORSO_X=HumanTorsoX\n\
string HUMAN_TORSO_Y=HumanTorsoY\n\
string HUMAN_TORSO_Z=HumanTorsoZ\n\
string HUMAN_TORSO_ROLL=HumanTorsoRoll\n\
string HUMAN_TORSO_PITCH=HumanTorsoPitch\n\
string HUMAN_TORSO_YAW=HumanTorsoYaw\n\
string HUMAN_HEAD_ROLL=HumanHeadRoll\n\
string HUMAN_HEAD_PITCH=HumanHeadPitch\n\
string HUMAN_HEAD_YAW=HumanHeadYaw\n\
string HUMAN_PRESENCE=HumanPresence\n\
string AFFORDANCE_ACC=AffordanceAccuracy\n\
string type\n\
string DISPERSIVE_VALUED=DispersiveValued\n\
string SINGLE_VALUED=SingleValued\n\
string val_type\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Time\n\
time data\n\
\n\
";
  }

  static const char* value(const  ::al_msgs::Feature_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_msgs::Feature_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.min);
    stream.next(m.max);
    stream.next(m.avg);
    stream.next(m.var);
    stream.next(m.dev);
    stream.next(m.his);
    stream.next(m.stamp);
    stream.next(m.range_min);
    stream.next(m.range_max);
    stream.next(m.n_hist_bins);
    stream.next(m.type);
    stream.next(m.val_type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Feature_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_msgs::Feature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_msgs::Feature_<ContainerAllocator> & v) 
  {
    s << indent << "min: ";
    Printer<float>::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    Printer<float>::stream(s, indent + "  ", v.max);
    s << indent << "avg: ";
    Printer<float>::stream(s, indent + "  ", v.avg);
    s << indent << "var: ";
    Printer<float>::stream(s, indent + "  ", v.var);
    s << indent << "dev: ";
    Printer<float>::stream(s, indent + "  ", v.dev);
    s << indent << "his[]" << std::endl;
    for (size_t i = 0; i < v.his.size(); ++i)
    {
      s << indent << "  his[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.his[i]);
    }
    s << indent << "stamp: ";
s << std::endl;
    Printer< ::std_msgs::Time_<ContainerAllocator> >::stream(s, indent + "  ", v.stamp);
    s << indent << "range_min: ";
    Printer<float>::stream(s, indent + "  ", v.range_min);
    s << indent << "range_max: ";
    Printer<float>::stream(s, indent + "  ", v.range_max);
    s << indent << "n_hist_bins: ";
    Printer<int16_t>::stream(s, indent + "  ", v.n_hist_bins);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "val_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.val_type);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_MSGS_MESSAGE_FEATURE_H


/* Auto-generated by genmsg_cpp for file /home/user/metu-ros-pkg/affordance_learning/al_behavior/msg/HeadResult.msg */
#ifndef AL_BEHAVIOR_MESSAGE_HEADRESULT_H
#define AL_BEHAVIOR_MESSAGE_HEADRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"

namespace al_behavior
{
template <class ContainerAllocator>
struct HeadResult_ {
  typedef HeadResult_<ContainerAllocator> Type;

  HeadResult_()
  : lastPosition()
  {
  }

  HeadResult_(const ContainerAllocator& _alloc)
  : lastPosition(_alloc)
  {
  }

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _lastPosition_type;
   ::geometry_msgs::Point_<ContainerAllocator>  lastPosition;


  typedef boost::shared_ptr< ::al_behavior::HeadResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_behavior::HeadResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HeadResult
typedef  ::al_behavior::HeadResult_<std::allocator<void> > HeadResult;

typedef boost::shared_ptr< ::al_behavior::HeadResult> HeadResultPtr;
typedef boost::shared_ptr< ::al_behavior::HeadResult const> HeadResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_behavior::HeadResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_behavior::HeadResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_behavior

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_behavior::HeadResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_behavior::HeadResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_behavior::HeadResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c1b0d8e2d7a670d8c0a7208d0405e82c";
  }

  static const char* value(const  ::al_behavior::HeadResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc1b0d8e2d7a670d8ULL;
  static const uint64_t static_value2 = 0xc0a7208d0405e82cULL;
};

template<class ContainerAllocator>
struct DataType< ::al_behavior::HeadResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_behavior/HeadResult";
  }

  static const char* value(const  ::al_behavior::HeadResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_behavior::HeadResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result definition\n\
geometry_msgs/Point lastPosition\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::al_behavior::HeadResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::al_behavior::HeadResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_behavior::HeadResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.lastPosition);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HeadResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_behavior::HeadResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_behavior::HeadResult_<ContainerAllocator> & v) 
  {
    s << indent << "lastPosition: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lastPosition);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_BEHAVIOR_MESSAGE_HEADRESULT_H


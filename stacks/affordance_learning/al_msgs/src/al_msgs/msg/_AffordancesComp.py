"""autogenerated by genpy from al_msgs/AffordancesComp.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import al_msgs.msg

class AffordancesComp(genpy.Message):
  _md5sum = "b64104372ef8f35bc51beb372fbf344a"
  _type = "al_msgs/AffordancesComp"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 behavior_id
int8 entity_id
float32[] object_pos
float32[] object_dims
al_msgs/Effect[] effects

================================================================================
MSG: al_msgs/Effect
int8 MAX_EFFECT_INDEX = 29

int8 NO_CHANGE=0
int8 REACHED=1
int8 MOVED_RIGHT=2
int8 MOVED_LEFT=3
int8 MOVED_FORWARD=4
int8 MOVED_BACKWARD=5
int8 DISAPPEARED=6
int8 VANISHED=7
int8 ROTATED_CW=8
int8 ROTATED_CCW=9
int8 TOPPLED_RGT=10
int8 TOPPLED_LFT=11
int8 TOPPLED_FWD=12
int8 TOPPLED_BWD=13
int8 ROLLED_RIGHT=14
int8 ROLLED_LEFT=15
int8 ROLLED_FORWARD=16
int8 ROLLED_BACKWARD=17
int8 GRASPED=18
int8 ACQUIRED=19
int8 RELEASED=20
int8 TAKEN=21
int8 GIVEN=22
int8 GOT_ATTENTION=23
int8 TOPPLED=24
int8 GOT_SEATED=25
int8 GOT_CLOSER=26
int8 GOT_FURTHER=27
int8 STOOD_UP=28
int8 WENT_AWAY=29

#later arg can be made vector if multiple effect
#instances to be captured in one action application
int8 effect
int8 arg
float32 prob #probability of this effect to occur, this is set by "learning"

"""
  __slots__ = ['behavior_id','entity_id','object_pos','object_dims','effects']
  _slot_types = ['int8','int8','float32[]','float32[]','al_msgs/Effect[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       behavior_id,entity_id,object_pos,object_dims,effects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AffordancesComp, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.behavior_id is None:
        self.behavior_id = 0
      if self.entity_id is None:
        self.entity_id = 0
      if self.object_pos is None:
        self.object_pos = []
      if self.object_dims is None:
        self.object_dims = []
      if self.effects is None:
        self.effects = []
    else:
      self.behavior_id = 0
      self.entity_id = 0
      self.object_pos = []
      self.object_dims = []
      self.effects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2b.pack(_x.behavior_id, _x.entity_id))
      length = len(self.object_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.object_pos))
      length = len(self.object_dims)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.object_dims))
      length = len(self.effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.effects:
        _x = val1
        buff.write(_struct_2bf.pack(_x.effect, _x.arg, _x.prob))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.effects is None:
        self.effects = None
      end = 0
      _x = self
      start = end
      end += 2
      (_x.behavior_id, _x.entity_id,) = _struct_2b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.object_pos = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.object_dims = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.effects = []
      for i in range(0, length):
        val1 = al_msgs.msg.Effect()
        _x = val1
        start = end
        end += 6
        (_x.effect, _x.arg, _x.prob,) = _struct_2bf.unpack(str[start:end])
        self.effects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2b.pack(_x.behavior_id, _x.entity_id))
      length = len(self.object_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.object_pos.tostring())
      length = len(self.object_dims)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.object_dims.tostring())
      length = len(self.effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.effects:
        _x = val1
        buff.write(_struct_2bf.pack(_x.effect, _x.arg, _x.prob))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.effects is None:
        self.effects = None
      end = 0
      _x = self
      start = end
      end += 2
      (_x.behavior_id, _x.entity_id,) = _struct_2b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.object_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.object_dims = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.effects = []
      for i in range(0, length):
        val1 = al_msgs.msg.Effect()
        _x = val1
        start = end
        end += 6
        (_x.effect, _x.arg, _x.prob,) = _struct_2bf.unpack(str[start:end])
        self.effects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2bf = struct.Struct("<2bf")
_struct_2b = struct.Struct("<2b")

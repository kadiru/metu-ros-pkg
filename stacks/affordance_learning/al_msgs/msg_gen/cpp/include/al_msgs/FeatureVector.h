/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_msgs/msg/FeatureVector.msg */
#ifndef AL_MSGS_MESSAGE_FEATUREVECTOR_H
#define AL_MSGS_MESSAGE_FEATUREVECTOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "al_msgs/Feature.h"

namespace al_msgs
{
template <class ContainerAllocator>
struct FeatureVector_ {
  typedef FeatureVector_<ContainerAllocator> Type;

  FeatureVector_()
  : features()
  {
  }

  FeatureVector_(const ContainerAllocator& _alloc)
  : features(_alloc)
  {
  }

  typedef std::vector< ::al_msgs::Feature_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::al_msgs::Feature_<ContainerAllocator> >::other >  _features_type;
  std::vector< ::al_msgs::Feature_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::al_msgs::Feature_<ContainerAllocator> >::other >  features;


  typedef boost::shared_ptr< ::al_msgs::FeatureVector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_msgs::FeatureVector_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FeatureVector
typedef  ::al_msgs::FeatureVector_<std::allocator<void> > FeatureVector;

typedef boost::shared_ptr< ::al_msgs::FeatureVector> FeatureVectorPtr;
typedef boost::shared_ptr< ::al_msgs::FeatureVector const> FeatureVectorConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_msgs::FeatureVector_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_msgs::FeatureVector_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_msgs::FeatureVector_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_msgs::FeatureVector_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_msgs::FeatureVector_<ContainerAllocator> > {
  static const char* value() 
  {
    return "900022e9180f4c6efb0159069338bd46";
  }

  static const char* value(const  ::al_msgs::FeatureVector_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x900022e9180f4c6eULL;
  static const uint64_t static_value2 = 0xfb0159069338bd46ULL;
};

template<class ContainerAllocator>
struct DataType< ::al_msgs::FeatureVector_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/FeatureVector";
  }

  static const char* value(const  ::al_msgs::FeatureVector_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_msgs::FeatureVector_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/Feature[] features\n\
\n\
================================================================================\n\
MSG: al_msgs/Feature\n\
float32 min # min value\n\
float32 max # max value\n\
float32 avg # average value\n\
float32 var # variance\n\
float32 dev # standard deviation\n\
float32[] his # histogram\n\
std_msgs/Time stamp # time stamp when this feature is calculated\n\
float32 range_min # min value that this feature can get\n\
float32 range_max # max value that this feature can get\n\
int16 n_hist_bins # number of bins in its histogram\n\
string NORMAL_AZI=NormalAzimuth\n\
string NORMAL_ZEN=NormalZenith\n\
string CURV_MIN=MinCurvature\n\
string CURV_MAX=MaxCurvature\n\
string CURV_MEAN=MeanCurvature\n\
string CURV_GAUSS=GaussCurvature\n\
string SHAPE_INDEX=ShapeIndex\n\
string R_COLOR=RedColor\n\
string G_COLOR=GreenColor\n\
string B_COLOR=BlueColor\n\
string POS_X=PositionX\n\
string POS_Y=PositionY\n\
string POS_Z=PositionZ\n\
string ROT_T=RotationTheta\n\
string DIM_X=DimensionX\n\
string DIM_Y=DimensionY\n\
string DIM_Z=DimensionZ\n\
string OBJECT_PRESENCE=ObjectPresence\n\
string HUMAN_TORSO_X=HumanTorsoX\n\
string HUMAN_TORSO_Y=HumanTorsoY\n\
string HUMAN_TORSO_Z=HumanTorsoZ\n\
string HUMAN_TORSO_ROLL=HumanTorsoRoll\n\
string HUMAN_TORSO_PITCH=HumanTorsoPitch\n\
string HUMAN_TORSO_YAW=HumanTorsoYaw\n\
string HUMAN_HEAD_ROLL=HumanHeadRoll\n\
string HUMAN_HEAD_PITCH=HumanHeadPitch\n\
string HUMAN_HEAD_YAW=HumanHeadYaw\n\
string HUMAN_PRESENCE=HumanPresence\n\
string AFFORDANCE_ACC=AffordanceAccuracy\n\
string type\n\
string DISPERSIVE_VALUED=DispersiveValued\n\
string SINGLE_VALUED=SingleValued\n\
string val_type\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Time\n\
time data\n\
\n\
";
  }

  static const char* value(const  ::al_msgs::FeatureVector_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_msgs::FeatureVector_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.features);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FeatureVector_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_msgs::FeatureVector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_msgs::FeatureVector_<ContainerAllocator> & v) 
  {
    s << indent << "features[]" << std::endl;
    for (size_t i = 0; i < v.features.size(); ++i)
    {
      s << indent << "  features[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::al_msgs::Feature_<ContainerAllocator> >::stream(s, indent + "    ", v.features[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_MSGS_MESSAGE_FEATUREVECTOR_H


/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_srvs/srv/GetBehavior.srv */
#ifndef AL_SRVS_SERVICE_GETBEHAVIOR_H
#define AL_SRVS_SERVICE_GETBEHAVIOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "al_msgs/Behavior.h"



namespace al_srvs
{
template <class ContainerAllocator>
struct GetBehaviorRequest_ {
  typedef GetBehaviorRequest_<ContainerAllocator> Type;

  GetBehaviorRequest_()
  : behavior()
  {
  }

  GetBehaviorRequest_(const ContainerAllocator& _alloc)
  : behavior(_alloc)
  {
  }

  typedef  ::al_msgs::Behavior_<ContainerAllocator>  _behavior_type;
   ::al_msgs::Behavior_<ContainerAllocator>  behavior;


  typedef boost::shared_ptr< ::al_srvs::GetBehaviorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_srvs::GetBehaviorRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetBehaviorRequest
typedef  ::al_srvs::GetBehaviorRequest_<std::allocator<void> > GetBehaviorRequest;

typedef boost::shared_ptr< ::al_srvs::GetBehaviorRequest> GetBehaviorRequestPtr;
typedef boost::shared_ptr< ::al_srvs::GetBehaviorRequest const> GetBehaviorRequestConstPtr;


template <class ContainerAllocator>
struct GetBehaviorResponse_ {
  typedef GetBehaviorResponse_<ContainerAllocator> Type;

  GetBehaviorResponse_()
  : feedback(0)
  {
  }

  GetBehaviorResponse_(const ContainerAllocator& _alloc)
  : feedback(0)
  {
  }

  typedef int8_t _feedback_type;
  int8_t feedback;


  typedef boost::shared_ptr< ::al_srvs::GetBehaviorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_srvs::GetBehaviorResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetBehaviorResponse
typedef  ::al_srvs::GetBehaviorResponse_<std::allocator<void> > GetBehaviorResponse;

typedef boost::shared_ptr< ::al_srvs::GetBehaviorResponse> GetBehaviorResponsePtr;
typedef boost::shared_ptr< ::al_srvs::GetBehaviorResponse const> GetBehaviorResponseConstPtr;

struct GetBehavior
{

typedef GetBehaviorRequest Request;
typedef GetBehaviorResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetBehavior
} // namespace al_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_srvs::GetBehaviorRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_srvs::GetBehaviorRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_srvs::GetBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "de987e9d3bb8dcbee3a3f4c5ae206de7";
  }

  static const char* value(const  ::al_srvs::GetBehaviorRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xde987e9d3bb8dcbeULL;
  static const uint64_t static_value2 = 0xe3a3f4c5ae206de7ULL;
};

template<class ContainerAllocator>
struct DataType< ::al_srvs::GetBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_srvs/GetBehaviorRequest";
  }

  static const char* value(const  ::al_srvs::GetBehaviorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_srvs::GetBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/Behavior behavior\n\
\n\
================================================================================\n\
MSG: al_msgs/Behavior\n\
int8 MAX_BEHAVIOR_INDEX = 36\n\
\n\
int8 TUCK_ARMS = 0\n\
int8 REACH = 1\n\
int8 COVER = 2\n\
int8 CALL = 3\n\
int8 TAKE = 4\n\
int8 GIVE = 5\n\
int8 GRASP_TOP = 6\n\
int8 GRASP_SIDE = 7\n\
int8 PUSH_RGT = 8\n\
int8 PUSH_LFT = 9\n\
int8 PUSH_FWD = 10\n\
int8 PUSH_BWD = 11\n\
int8 PUSH_TOP_RGT = 12\n\
int8 PUSH_TOP_LFT = 13\n\
int8 PUSH_TOP_FWD = 14\n\
int8 PUSH_TOP_BWD = 15\n\
int8 POINT=16\n\
int8 HIDE=17\n\
int8 CANCEL=18\n\
int8 STOP=19\n\
int8 SHOW=20\n\
int8 HOME=21\n\
int8 LOOK_AT_REGION=22\n\
int8 LOOK_AT_POINT=23\n\
int8 LOOK_AT_FACE=24\n\
int8 LIFT=25\n\
int8 RELEASE=26\n\
int8 CONTINUE=27\n\
int8 SAY_PASS_ME=28\n\
int8 HELLO=29\n\
int8 COME=30\n\
int8 SIT_DOWN=31\n\
int8 STAND_UP=32\n\
int8 BYE=33\n\
int8 PUSH_YOUR_RIGHT=34\n\
int8 PUSH_YOUR_LEFT=35\n\
int8 TAKE_GET=36\n\
\n\
Header header\n\
int8 behavior\n\
int8 arg\n\
string entity\n\
bool is_preemptive\n\
bool is_interactive\n\
float32 prob #probability of this behavior to result in a specific effect, this is set by \"learning\"\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::al_srvs::GetBehaviorRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_srvs::GetBehaviorResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_srvs::GetBehaviorResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_srvs::GetBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2c99621d1dee505388e972db86733bb8";
  }

  static const char* value(const  ::al_srvs::GetBehaviorResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2c99621d1dee5053ULL;
  static const uint64_t static_value2 = 0x88e972db86733bb8ULL;
};

template<class ContainerAllocator>
struct DataType< ::al_srvs::GetBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_srvs/GetBehaviorResponse";
  }

  static const char* value(const  ::al_srvs::GetBehaviorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_srvs::GetBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 feedback\n\
\n\
\n\
";
  }

  static const char* value(const  ::al_srvs::GetBehaviorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::al_srvs::GetBehaviorResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_srvs::GetBehaviorRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.behavior);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetBehaviorRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_srvs::GetBehaviorResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.feedback);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetBehaviorResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<al_srvs::GetBehavior> {
  static const char* value() 
  {
    return "34db43bab01882dcc99a2a7b027034db";
  }

  static const char* value(const al_srvs::GetBehavior&) { return value(); } 
};

template<>
struct DataType<al_srvs::GetBehavior> {
  static const char* value() 
  {
    return "al_srvs/GetBehavior";
  }

  static const char* value(const al_srvs::GetBehavior&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<al_srvs::GetBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "34db43bab01882dcc99a2a7b027034db";
  }

  static const char* value(const al_srvs::GetBehaviorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<al_srvs::GetBehaviorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_srvs/GetBehavior";
  }

  static const char* value(const al_srvs::GetBehaviorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<al_srvs::GetBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "34db43bab01882dcc99a2a7b027034db";
  }

  static const char* value(const al_srvs::GetBehaviorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<al_srvs::GetBehaviorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_srvs/GetBehavior";
  }

  static const char* value(const al_srvs::GetBehaviorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // AL_SRVS_SERVICE_GETBEHAVIOR_H


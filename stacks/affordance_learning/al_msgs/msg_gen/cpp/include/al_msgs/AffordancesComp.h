/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_msgs/msg/AffordancesComp.msg */
#ifndef AL_MSGS_MESSAGE_AFFORDANCESCOMP_H
#define AL_MSGS_MESSAGE_AFFORDANCESCOMP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "al_msgs/Effect.h"

namespace al_msgs
{
template <class ContainerAllocator>
struct AffordancesComp_ {
  typedef AffordancesComp_<ContainerAllocator> Type;

  AffordancesComp_()
  : behavior_id(0)
  , entity_id(0)
  , object_pos()
  , object_dims()
  , effects()
  {
  }

  AffordancesComp_(const ContainerAllocator& _alloc)
  : behavior_id(0)
  , entity_id(0)
  , object_pos(_alloc)
  , object_dims(_alloc)
  , effects(_alloc)
  {
  }

  typedef int8_t _behavior_id_type;
  int8_t behavior_id;

  typedef int8_t _entity_id_type;
  int8_t entity_id;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _object_pos_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  object_pos;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _object_dims_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  object_dims;

  typedef std::vector< ::al_msgs::Effect_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::al_msgs::Effect_<ContainerAllocator> >::other >  _effects_type;
  std::vector< ::al_msgs::Effect_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::al_msgs::Effect_<ContainerAllocator> >::other >  effects;


  typedef boost::shared_ptr< ::al_msgs::AffordancesComp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_msgs::AffordancesComp_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AffordancesComp
typedef  ::al_msgs::AffordancesComp_<std::allocator<void> > AffordancesComp;

typedef boost::shared_ptr< ::al_msgs::AffordancesComp> AffordancesCompPtr;
typedef boost::shared_ptr< ::al_msgs::AffordancesComp const> AffordancesCompConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_msgs::AffordancesComp_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_msgs::AffordancesComp_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_msgs::AffordancesComp_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_msgs::AffordancesComp_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_msgs::AffordancesComp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b64104372ef8f35bc51beb372fbf344a";
  }

  static const char* value(const  ::al_msgs::AffordancesComp_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb64104372ef8f35bULL;
  static const uint64_t static_value2 = 0xc51beb372fbf344aULL;
};

template<class ContainerAllocator>
struct DataType< ::al_msgs::AffordancesComp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/AffordancesComp";
  }

  static const char* value(const  ::al_msgs::AffordancesComp_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_msgs::AffordancesComp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 behavior_id\n\
int8 entity_id\n\
float32[] object_pos\n\
float32[] object_dims\n\
al_msgs/Effect[] effects\n\
\n\
================================================================================\n\
MSG: al_msgs/Effect\n\
int8 MAX_EFFECT_INDEX = 29\n\
\n\
int8 NO_CHANGE=0\n\
int8 REACHED=1\n\
int8 MOVED_RIGHT=2\n\
int8 MOVED_LEFT=3\n\
int8 MOVED_FORWARD=4\n\
int8 MOVED_BACKWARD=5\n\
int8 DISAPPEARED=6\n\
int8 VANISHED=7\n\
int8 ROTATED_CW=8\n\
int8 ROTATED_CCW=9\n\
int8 TOPPLED_RGT=10\n\
int8 TOPPLED_LFT=11\n\
int8 TOPPLED_FWD=12\n\
int8 TOPPLED_BWD=13\n\
int8 ROLLED_RIGHT=14\n\
int8 ROLLED_LEFT=15\n\
int8 ROLLED_FORWARD=16\n\
int8 ROLLED_BACKWARD=17\n\
int8 GRASPED=18\n\
int8 ACQUIRED=19\n\
int8 RELEASED=20\n\
int8 TAKEN=21\n\
int8 GIVEN=22\n\
int8 GOT_ATTENTION=23\n\
int8 TOPPLED=24\n\
int8 GOT_SEATED=25\n\
int8 GOT_CLOSER=26\n\
int8 GOT_FURTHER=27\n\
int8 STOOD_UP=28\n\
int8 WENT_AWAY=29\n\
\n\
#later arg can be made vector if multiple effect\n\
#instances to be captured in one action application\n\
int8 effect\n\
int8 arg\n\
float32 prob #probability of this effect to occur, this is set by \"learning\"\n\
\n\
";
  }

  static const char* value(const  ::al_msgs::AffordancesComp_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_msgs::AffordancesComp_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.behavior_id);
    stream.next(m.entity_id);
    stream.next(m.object_pos);
    stream.next(m.object_dims);
    stream.next(m.effects);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AffordancesComp_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_msgs::AffordancesComp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_msgs::AffordancesComp_<ContainerAllocator> & v) 
  {
    s << indent << "behavior_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.behavior_id);
    s << indent << "entity_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.entity_id);
    s << indent << "object_pos[]" << std::endl;
    for (size_t i = 0; i < v.object_pos.size(); ++i)
    {
      s << indent << "  object_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.object_pos[i]);
    }
    s << indent << "object_dims[]" << std::endl;
    for (size_t i = 0; i < v.object_dims.size(); ++i)
    {
      s << indent << "  object_dims[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.object_dims[i]);
    }
    s << indent << "effects[]" << std::endl;
    for (size_t i = 0; i < v.effects.size(); ++i)
    {
      s << indent << "  effects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::al_msgs::Effect_<ContainerAllocator> >::stream(s, indent + "    ", v.effects[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_MSGS_MESSAGE_AFFORDANCESCOMP_H


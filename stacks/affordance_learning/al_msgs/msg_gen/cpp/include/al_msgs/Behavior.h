/* Auto-generated by genmsg_cpp for file /home/kadir/workspace/work/Dropbox/metu-ros-pkg/trunk/affordance_learning/al_msgs/msg/Behavior.msg */
#ifndef AL_MSGS_MESSAGE_BEHAVIOR_H
#define AL_MSGS_MESSAGE_BEHAVIOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace al_msgs
{
template <class ContainerAllocator>
struct Behavior_ {
  typedef Behavior_<ContainerAllocator> Type;

  Behavior_()
  : header()
  , behavior(0)
  , arg(0)
  , entity()
  , is_preemptive(false)
  , is_interactive(false)
  , prob(0.0)
  {
  }

  Behavior_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , behavior(0)
  , arg(0)
  , entity(_alloc)
  , is_preemptive(false)
  , is_interactive(false)
  , prob(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int8_t _behavior_type;
  int8_t behavior;

  typedef int8_t _arg_type;
  int8_t arg;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _entity_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  entity;

  typedef uint8_t _is_preemptive_type;
  uint8_t is_preemptive;

  typedef uint8_t _is_interactive_type;
  uint8_t is_interactive;

  typedef float _prob_type;
  float prob;

  enum { MAX_BEHAVIOR_INDEX = 36 };
  enum { TUCK_ARMS = 0 };
  enum { REACH = 1 };
  enum { COVER = 2 };
  enum { CALL = 3 };
  enum { TAKE = 4 };
  enum { GIVE = 5 };
  enum { GRASP_TOP = 6 };
  enum { GRASP_SIDE = 7 };
  enum { PUSH_RGT = 8 };
  enum { PUSH_LFT = 9 };
  enum { PUSH_FWD = 10 };
  enum { PUSH_BWD = 11 };
  enum { PUSH_TOP_RGT = 12 };
  enum { PUSH_TOP_LFT = 13 };
  enum { PUSH_TOP_FWD = 14 };
  enum { PUSH_TOP_BWD = 15 };
  enum { POINT = 16 };
  enum { HIDE = 17 };
  enum { CANCEL = 18 };
  enum { STOP = 19 };
  enum { SHOW = 20 };
  enum { HOME = 21 };
  enum { LOOK_AT_REGION = 22 };
  enum { LOOK_AT_POINT = 23 };
  enum { LOOK_AT_FACE = 24 };
  enum { LIFT = 25 };
  enum { RELEASE = 26 };
  enum { CONTINUE = 27 };
  enum { SAY_PASS_ME = 28 };
  enum { HELLO = 29 };
  enum { COME = 30 };
  enum { SIT_DOWN = 31 };
  enum { STAND_UP = 32 };
  enum { BYE = 33 };
  enum { PUSH_YOUR_RIGHT = 34 };
  enum { PUSH_YOUR_LEFT = 35 };
  enum { TAKE_GET = 36 };

  typedef boost::shared_ptr< ::al_msgs::Behavior_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::al_msgs::Behavior_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Behavior
typedef  ::al_msgs::Behavior_<std::allocator<void> > Behavior;

typedef boost::shared_ptr< ::al_msgs::Behavior> BehaviorPtr;
typedef boost::shared_ptr< ::al_msgs::Behavior const> BehaviorConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::al_msgs::Behavior_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::al_msgs::Behavior_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace al_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Behavior_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::al_msgs::Behavior_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::al_msgs::Behavior_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ccdffe7925ef3686ec5909efa3835884";
  }

  static const char* value(const  ::al_msgs::Behavior_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xccdffe7925ef3686ULL;
  static const uint64_t static_value2 = 0xec5909efa3835884ULL;
};

template<class ContainerAllocator>
struct DataType< ::al_msgs::Behavior_<ContainerAllocator> > {
  static const char* value() 
  {
    return "al_msgs/Behavior";
  }

  static const char* value(const  ::al_msgs::Behavior_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::al_msgs::Behavior_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 MAX_BEHAVIOR_INDEX = 36\n\
\n\
int8 TUCK_ARMS = 0\n\
int8 REACH = 1\n\
int8 COVER = 2\n\
int8 CALL = 3\n\
int8 TAKE = 4\n\
int8 GIVE = 5\n\
int8 GRASP_TOP = 6\n\
int8 GRASP_SIDE = 7\n\
int8 PUSH_RGT = 8\n\
int8 PUSH_LFT = 9\n\
int8 PUSH_FWD = 10\n\
int8 PUSH_BWD = 11\n\
int8 PUSH_TOP_RGT = 12\n\
int8 PUSH_TOP_LFT = 13\n\
int8 PUSH_TOP_FWD = 14\n\
int8 PUSH_TOP_BWD = 15\n\
int8 POINT=16\n\
int8 HIDE=17\n\
int8 CANCEL=18\n\
int8 STOP=19\n\
int8 SHOW=20\n\
int8 HOME=21\n\
int8 LOOK_AT_REGION=22\n\
int8 LOOK_AT_POINT=23\n\
int8 LOOK_AT_FACE=24\n\
int8 LIFT=25\n\
int8 RELEASE=26\n\
int8 CONTINUE=27\n\
int8 SAY_PASS_ME=28\n\
int8 HELLO=29\n\
int8 COME=30\n\
int8 SIT_DOWN=31\n\
int8 STAND_UP=32\n\
int8 BYE=33\n\
int8 PUSH_YOUR_RIGHT=34\n\
int8 PUSH_YOUR_LEFT=35\n\
int8 TAKE_GET=36\n\
\n\
Header header\n\
int8 behavior\n\
int8 arg\n\
string entity\n\
bool is_preemptive\n\
bool is_interactive\n\
float32 prob #probability of this behavior to result in a specific effect, this is set by \"learning\"\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::al_msgs::Behavior_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::al_msgs::Behavior_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::al_msgs::Behavior_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::al_msgs::Behavior_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.behavior);
    stream.next(m.arg);
    stream.next(m.entity);
    stream.next(m.is_preemptive);
    stream.next(m.is_interactive);
    stream.next(m.prob);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Behavior_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::al_msgs::Behavior_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::al_msgs::Behavior_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "behavior: ";
    Printer<int8_t>::stream(s, indent + "  ", v.behavior);
    s << indent << "arg: ";
    Printer<int8_t>::stream(s, indent + "  ", v.arg);
    s << indent << "entity: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.entity);
    s << indent << "is_preemptive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_preemptive);
    s << indent << "is_interactive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_interactive);
    s << indent << "prob: ";
    Printer<float>::stream(s, indent + "  ", v.prob);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AL_MSGS_MESSAGE_BEHAVIOR_H

